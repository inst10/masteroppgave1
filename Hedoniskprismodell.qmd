---
title: "Hedoniskprismodell"
format: 
  html: default
  typst:
    papersize: a4
    fontsize: 11pt
editor: visual
---

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(dplyr)
library(readxl)
library(stringr)
library(lubridate)
library(flextable)
library(tidymodels)
library(knitr)
library(kableExtra)
library(broom)
library(sandwich)
library(lmtest)
```

### Hedonisk prismodell

Laster inn datasett og filtrerer

```{r}
data <- read_excel("2025_HVL_Stromme_Data.xlsx")
```

```{r}
avstander_haugesund <- read_excel("avstander_haugesund.xlsx")
```

```{r}
grunnkretser_navn <- read_excel("grunnkretser_navn.xlsx")
```

```{r}
avstander_haugesund <- avstander_haugesund %>%
  rename(Avstand_km = network_cost_km)
```

```{r}
grunnkretser_navn <- grunnkretser_navn %>%
  rename(Grunnkrets = Grunnkretsnavn)
```

```{r}
# Behold kun de nødvendige kolonnene i avstander_haugesund
avstander_haugesund <- avstander_haugesund %>%
  select(Grunnkretskode, Avstand_km)
```

```{r}
avstander_haugesund <- avstander_haugesund %>%
  left_join(grunnkretser_navn, by = "Grunnkretskode")
```

```{r}
data <- data %>%
  mutate(Grunnkrets = str_to_title(Grunnkrets),
         Kommune = str_to_title(Kommune)
         )

```

```{r}
data <- data |> 
  left_join(avstander_haugesund, by = "Grunnkrets")
```

```{r}
# Konverter begge Grunnkrets-kolonnene til character
data$Grunnkrets <- as.character(data$Grunnkrets)
avstander_haugesund$Grunnkrets <- as.character(avstander_haugesund$Grunnkrets)

# Nå kan vi gjøre join
data <- data %>%
  left_join(avstander_haugesund, by = "Grunnkrets")

```

```{r}
# Konverter til datoformat (hvis nødvendig)
data$Salgsdato <- as.Date(data$Salgsdato, format="%d.%m.%Y")

# Trekk ut året og lag "Salgsår"-variabel
data$Salgsår <- year(data$Salgsdato)

# Sjekk at endringen er gjort riktig
table(data$Salgsår)

# Fjern "Salgsdato" hvis du ikke trenger den
data$Salgsdato <- NULL

```

###### Setter inn KPI

```{r}
kpi_data <- tibble(
    Salgsår = 2008:2024,

    kpi = c(88, 89.9, 92.1, 93.3, 93.9, 95.9, 97.9, 100, 103.6,
105.5, 108.4, 110.8, 112.2, 116.1, 122.8, 129.6, 133.6)

) |>

    mutate(kpi_basis = kpi[Salgsår == 2008])
```

```{r}
data <- data |>
    left_join(y = kpi_data,
        join_by("Salgsår")
    )
```

###### Får realpris

```{r}
data$Realpris <- (data$Pris + data$Fellesgjeld) * (data$kpi_basis/ data$kpi)
```

```{r}
library(ggplot2)

ggplot(data, aes(x = Salgsår)) +
  geom_line(aes(y = Pris, color = "Nominell pris")) +
  geom_line(aes(y = Realpris, color = "Realpris (2008-nivå)")) +
  labs(title = "Sammenligning av nominelle priser og realpriser",
       y = "Pris", x = "År") +
  theme_minimal()

```

```{r}
# Forsøk å lage `Alder` på en trygg måte
data <- data %>%
  mutate(
    Byggeår = as.numeric(as.character(Byggeår)),  # Konverter til numerisk
    Salgsår = as.numeric(as.character(Salgsår)),  # Konverter til numerisk
    Alder = ifelse(!is.na(Byggeår) & !is.na(Salgsår), Salgsår - Byggeår, NA)  # Beregn alder
  )

# Sjekk resultatet
summary(data$Alder)

```

```{r}
colSums(is.na(data))

```

```{r}
# Fjerner rader med NA i de viktigste variablene
data_clean <- data %>%
  filter(!is.na(BRA) & !is.na(Soverom) & !is.na(Byggeår) & !is.na(Alder))

# Sjekker hvor mange rader som er igjen
nrow(data_clean)

```

###### Legger til Alder\^2

```{r}
# Filtrer ut boliger eldre enn 150 år
data_clean <- data_clean %>% filter(Alder <= 2000)

# Sjekk fordeling etter filtrering
summary(data_clean$Alder)
hist(data_clean$Alder, breaks = 50, main = "Aldersfordeling etter filtrering")
```

sletter variabler jeg ikke trenger

```{r}
# Fjern unødvendige variabler
data_clean <- data_clean %>%
  select(-EiendomsID, -Kommune, -Etasje, -Tomtestørrelse, 
       -Grunnkretskode.x, -Avstand_km.x)

# Sjekk at variablene er fjernet
glimpse(data_clean)  # Eller bruk: colnames(data_clean)

```

```{r}

data_clean <- data_clean %>%
  rename(
    Grunnkretskode = Grunnkretskode.y,
    Avstand_km = Avstand_km.y
  )

```

setter fellesgjeld til Dummy 0 og 1

```{r}
data_clean$har_fellesgjeld <- ifelse(data_clean$Fellesgjeld > 0, 1, 0)

```

#### **Lineær regresjon med Realpris (justert for KPI) som avhengig variabel:**

```{r}
model1 <- lm(Realpris ~ BRA + Soverom + Byggeår + Boligtype + Eieform + Grunnkrets + Alder + factor(Salgsår) + Fellesgjeld, 
            data = data_clean)
summary(model1)
```

#### Log transformasjon:

```{r}
# Sett ønskede referansekategorier
data_clean$Boligtype <- relevel(factor(data_clean$Boligtype), ref = "Rekkehus")
data_clean$Eieform <- relevel(factor(data_clean$Eieform), ref = "Selveier")
data_clean$Salgsår <- relevel(factor(data_clean$Salgsår), ref = "2008")

```

```{r}
# Log-transformert regresjon
#| label: tbl-logreg
#| tbl-cap: Regresjonsmodell
model_log <- data_clean |> 
  mutate(
    Boligtype = fct(as.character(Boligtype)),
    Eieform = fct(as.character(Eieform)),
    Salgsår = fct(as.character(Salgsår)),
    Leilighet_Selveier = ifelse(Boligtype == "Leilighet" & Eieform == "Selveier", 1, 0),
        Rekkehus_Selveier = ifelse(Boligtype == "Rekkehus" & Eieform == "Selveier", 1, 0),
    Tomannsbolig_Selveier = ifelse(Boligtype == "Tomannsbolig" & Eieform == "Selveier", 1, 0)
  ) %>%
  lm(
    formula = log(Realpris) ~ BRA + Soverom + Alder + I(Alder^2) + har_fellesgjeld + Avstand_km + Boligtype + Eieform + Leilighet_Selveier + Rekkehus_Selveier + Tomannsbolig_Selveier + Salgsår,
    data = .
    )

summary(model_log)

model_log |>  as_flextable() |> 
line_spacing(space = 0.3)

```

```{r}
ggplot(data_clean, aes(x = Alder, y = log(Realpris))) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE, color = "blue") +
  labs(title = "Sammenheng mellom boligpris og alder",
       x = "Alder på bolig",
       y = "Log(realpris)")
```

#### Heteroskedastisitet

```{r}
library(lmtest)

# Sjekker om heteroskedastisitet er til stede
bptest(model_log)

```

```{r}
#for finere resultat:
library(lmtest)
library(flextable)

# Kjør testen
bp_result <- bptest(model_log)

# Lag en data frame med testresultatene
tbl_bp_test <- data.frame(
  Test = "Breusch-Pagan",
  BP_statistic = round(bp_result$statistic, 2),
  df = bp_result$parameter,
  p_value = format.pval(bp_result$p.value, digits = 4, eps = 0.0001)
)

# Konverter til en pen flextable-tabell
tbl_bp_test_flex <- flextable(tbl_bp_test) %>%
  set_caption("Breusch-Pagan test for heteroskedastisitet")

# Vis tabellen
tbl_bp_test_flex

```

For å sikre at modellestimatene er robuste, har jeg testet og justert for heteroskedastisitet i den log-transformerte hedoniske prismodellen.
For å teste for heteroskedastisitet ble Breusch-Pagan-testen gjennomført.
Testen har følgende hypoteser:

H₀: Variansen til residualene er konstant (homoskedastisitet).

H₁: Variansen til residualene er ikke konstant og avhenger av de uavhengige variablene (heteroskedastisitet).

Resultatet av testen viser en teststatistikk på BP = 1516.5, med en p-verdi \< 2.2e-16.
Siden p-verdien er svært lav, kan nullhypotesen om homoskedastisitet forkastes til fordel for alternativhypotesen.
Dette indikerer at det er heteroskedastisitet i modellen, noe som kan føre til upålitelige standardfeil og p-verdier.
For å korrigere for dette benyttes robuste standardfeil i videre analyser.

Videre bruker jeg regresjon mot robuste standardfeil.
**Første koden viser mange desimaler på p_value, så kjør den nedenfor så får man en finere modell:**

```{r}
# Installer og last inn nødvendige pakker
# dette er samme kode som under, bare FINERE pga flxtable
install.packages("flextable")
library(flextable)

# Lag en data frame med regresjonsresultatene
tbl_regresjon <- data.frame(
  Variabel = rownames(coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))),
  Estimate = coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))[,1],
  Std_Error = coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))[,2],
  t_value = coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))[,3],
  p_value = coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))[,4]
)

# Lag en flextable for å formatere tabellen pent
tbl_regresjon %>%
  flextable() %>%
  colformat_num(j = c("Estimate", "Std_Error", "t_value", "p_value"), digits = 4) %>%
  set_caption("Regresjonsresultater med robuste standardfeil") %>%
  autofit()


```

```{r}
tbl_regresjon %>%
  flextable() %>%
  colformat_num(j = c("Estimate", "Std_Error", "t_value"), digits = 4) %>%
  colformat_double(j = "p_value", digits = 5) %>%
  set_caption("Regresjonsresultater med robuste standardfeil") %>%
  autofit()

```

```{r}
library(sandwich)
library(lmtest)

# Kjør regresjon med robuste standardfeil
coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))
```

Resultat av heteroskedastisitet:

Videre ble det brukt regresjon med robuste standardfeil for å redusere risikoen for feiltolkning av standardfeilene som følge av heteroskedastisitet.
De viktigste funnene fra analysen forblir stort sett uendret.
Variablene BRA, soverom og alder er fortsatt sterkt signifikante og har forventet positiv sammenheng med boligpriser.
Eieform viser fremdeles at selveierboliger er betydelig dyrere enn borettslagsboliger.
Fellesgjeld har fortsatt en positiv sammenheng med boligprisene, noe som trolig skyldes at totalprisen inkluderer fellesgjeld.

Når det gjelder **tidsdummyer**, ser vi at flere år fortsatt har signifikante effekter på boligprisene.
Spesielt **2010-2024** har positive og signifikante koeffisienter, noe som indikerer at boligprisene har økt over tid.
På geografisk nivå bekreftes betydningen av beliggenhet i Haugesunds boligmarked.
Flere grunnkretser viser sterke effekter, spesielt **Ramsdalen, Rossabønakken, Fjellstemmen Vest og Torevarden**, som har positiv sammenheng med boligpriser, mens **Røvær har en negativ sammenheng**.

Samlet sett styrker justeringen for robuste standardfeil modellens pålitelighet ved å redusere risikoen for feiltolkning som følge av heteroskedastisitet.
Resultatene kan dermed tolkes med høyere grad av sikkerhet.

Denne koden tester **signifikansen til koeffisientene** i regresjonen din, men **med standardfeil justert for klynger på grunnkretsnivå**.

forskjell fra den opprinnelige til den nye:

#### BRA og realpris, varierer over tid

##### Deler opp i flere tidsperioder

```{r}
# Sjekk datatypen
str(data_clean$Salgsår)

# Hvis det er en faktor eller karakter, konverter til numerisk:
data_clean$Salgsår <- as.numeric(as.character(data_clean$Salgsår))

# Sjekk at det nå er numerisk
str(data_clean$Salgsår)

```

```{r}

# Filtrere data_clean for de tre periodene
data_2008_2013 <- data_clean %>% filter(Salgsår >= 2008 & Salgsår <= 2013)
data_2014_2019 <- data_clean %>% filter(Salgsår >= 2014 & Salgsår <= 2019)
data_2020_2024 <- data_clean %>% filter(Salgsår >= 2020 & Salgsår <= 2024)

# Sjekke antall observasjoner i hvert datasett
nrow(data_2008_2013)
nrow(data_2014_2019)
nrow(data_2020_2024)

```

```{r}
library(broom)

    model_2008_2013 <- lm(log(Realpris) ~ BRA + factor(Salgsår) + Soverom + factor(Eieform) + har_fellesgjeld + Alder + I(Alder^2) + Avstand_km + factor(Boligtype),  data = data_2008_2013)
    
    model_2014_2019 <- lm(log(Realpris) ~ BRA + factor(Salgsår) + Soverom + factor(Eieform) + har_fellesgjeld + Alder + I(Alder^2) + 
                           Avstand_km + factor(Boligtype),  data = data_2014_2019)
    
    model_2020_2024 <- lm(log(Realpris) ~ BRA + factor(Salgsår) + Soverom +  factor(Eieform) + har_fellesgjeld + Alder + I(Alder^2) + Avstand_km + factor(Boligtype),  data = data_2020_2024)
    
summary(model_2008_2013)
summary(model_2014_2019)
summary(model_2020_2024)
```

Konfidensintervall for hver periode: tror dette er feil

```{r}
confint(model_2008_2013, level = 0.95)
confint(model_2014_2019, level = 0.95)
confint(model_2020_2024, level = 0.95)

```

### Leiligheter som egen regresjon, for hver periode

```{r}
data_leilighet <- data_clean %>%
  filter(Boligtype == "Leilighet") %>%
  mutate(
    Boligtype = as.factor(Boligtype),
    Eieform = as.factor(Eieform),
    Salgsår = as.factor(Salgsår)
  )

```

```{r}
# Lag datasett for kun leiligheter
leiligheter <- data_clean %>%
  filter(Boligtype == "Leilighet")

# Kjør regresjonsmodell for leiligheter
model_log_leil <- leiligheter %>%
  mutate(
    Eieform = fct(as.character(Eieform)),
    Salgsår = fct(as.character(Salgsår))
  ) %>%
  lm(
    formula = log(Realpris) ~ BRA + Soverom + Alder + I(Alder^2) +
      har_fellesgjeld + Avstand_km + Eieform + Salgsår,
    data = .
  )

# Oppsummer resultatet
summary(model_log_leil)

# Presenter modellen som flextable
model_log_leil |> 
  as_flextable() |> 
  line_spacing(space = 0.3)


```

```{r}
# Filtrer ut kun leiligheter
leiligheter <- data_clean %>% filter(Boligtype == "Leilighet")

# Definer regresjonsmodellen (du kan justere den om nødvendig)
regresjonsformel <- Realpris ~ BRA + Soverom + har_fellesgjeld + factor(Salgsår) + factor(Eieform) + Alder + I(Alder^2) + Avstand_km

# Kjør regresjoner for hver periode
model_2008_2013 <- lm(regresjonsformel, data = leiligheter %>% filter(Salgsår >= 2008 & Salgsår <= 2013))
model_2014_2019 <- lm(regresjonsformel, data = leiligheter %>% filter(Salgsår >= 2014 & Salgsår <= 2019))
model_2020_2024 <- lm(regresjonsformel, data = leiligheter %>% filter(Salgsår >= 2020 & Salgsår <= 2024))

# Vis regresjonsresultater
summary(model_2008_2013)
summary(model_2014_2019)
summary(model_2020_2024)

# Konfidensintervaller for hver modell
confint(model_2008_2013, level = 0.95)
confint(model_2014_2019, level = 0.95)
confint(model_2020_2024, level = 0.95)

```

**Resultat:**

-   Størrelse (BRA) har en signifikant positiv effekt på boligprisen i alle perioder.
    Koeffisienten øker over tid, fra 13,250 NOK per m² (2008-2013) til 16,061 NOK per m² (2020-2024).
    Dette tyder på at markedet i økende grad verdsetter større leiligheter.

-   Antall soverom har også en positiv effekt på prisen, men effekten er betydelig sterkere i senere perioder.

    -   2008-2013: 40,090 NOK per soverom

    -   2014-2019: 121,900 NOK per soverom

    -   2020-2024: 109,011 NOK per soverom\

        Dette kan tyde på at etterspørselen etter større leiligheter har økt over tid.

-   Alder på boligen har en negativ effekt på pris, mens alder i kvadrat har en positiv effekt.
    Dette tyder på en U-formet sammenheng, der nybygg er dyrere, eldre boliger faller i verdi, men svært gamle boliger kan være attraktive igjen (f.eks. oppussede bygg med særpreg).

-   Årsdummier viser at leilighetsprisene steg spesielt i 2012-2013, holdt seg stabile i 2014-2019, og steg kraftig i 2020-2024.

    **2008-2013: Etter finanskrisen, stigende boligpriser**

    -   Størrelse (BRA) og antall soverom er viktige faktorer, men verdien av soverom er lavere enn i senere perioder.

    -   Boligpriser stiger mest fra 2012-2013, der 2013 har en signifikant økning på 151,400 NOK sammenlignet med 2008.

    -   Enkelte grunnkretser har signifikant lavere priser enn referanseområdet.
        For eksempel er Bleikemyr (-516,600 NOK) og Skåredalen (-402,800 NOK) assosiert med lavere boligpriser, mens Fjellstemmen Øst (+656,200 NOK) og Haugetunet (+776,000 NOK) har høyere priser.

**2014-2019: Stabilisering etter boligprisvekst**

-   Prisene holder seg relativt stabile sammenlignet med 2008-2013.

-   Ingen signifikante prisendringer fra år til år (unntatt en svak nedgang i 2019).

-   Antall soverom får sterkere effekt på boligpriser, med en økning til 121,900 NOK per soverom.

-   Flere grunnkretser får signifikant lavere boligpriser, spesielt Kyvikdalen (-2,713,000 NOK) og Sentrum 10 (-528,400 NOK).

-   Haugetunet (-467,200 NOK) og Hemmingstad (-460,500 NOK) ser også en signifikant prisnedgang.

**2020-2024: Pandemi og boligprisboom**

-   Sterk prisvekst i 2023-2024, med en signifikant økning på 163,688 NOK i 2024 sammenlignet med 2020.

-   BRA og soverom har fortsatt sterk effekt, med 16,061 NOK per m² og 109,011 NOK per soverom.

-   Grunnkretser med høyest boligpriser:

    -   Sentrum 1 (+1,034,000 NOK)

    -   Ramsdalen (+596,100 NOK)

    -   Skeisvannsblokkene (+313,500 NOK)

-   Grunnkretser med lavere boligpriser:

    -   Kyvikdalen (-1,301,000 NOK)

    -   Solvang (-554,000 NOK)

    -   Sentrum 10 (-475,900 NOK)

    -   Udland (-549,500 NOK)

    **Hvordan kan du bruke dette i oppgaven?**

    1.  **Diskuter utviklingen i boligmarkedet i Haugesund for leiligheter**

        -   Hvilke faktorer driver prisene?
            Hvordan har dette endret seg over tid?

        -   Størrelse og antall soverom har blitt viktigere.

        -   Boligprisene steg mest i 2012-2013 og igjen i 2020-2024.

        **Knytt dette opp mot boliglånsforskriften**

        -   Har strammere lånekrav påvirket prisene i noen perioder?

        -   For eksempel: Stagnasjonen i 2014-2019 kan være knyttet til innstramminger i **2015-forskriften**.

        **Analyser forskjeller mellom områder**

        -   Noen grunnkretser har systematisk lavere priser (f.eks. Bleikemyr, Kyvikdalen), mens andre har høyere (Sentrum 1, Ramsdalen, Skeisvannsblokkene).

        -   Hvordan kan dette forklares?
            Beliggenhet?
            Attraktivitet?
            Infrastruktur?

        **Fremhev pandemiens effekt**

        -   Prisveksten i 2020-2024 kan delvis forklares av **lav rente under pandemien**, høy etterspørsel og færre tilgjengelige boliger.

![](images/clipboard-611890696.png)

Effekten er **ikke statistisk signifikant** (p-verdi = 0.1514 \> 0.05), så vi **kan ikke konkludere med at avstand systematisk påvirker boligprisene i Haugesund.**

### ROBUST ANALYSE basert på boligtype

```{r}
model_leilighet <- lm(log(Realpris) ~ Avstand_km + BRA + Soverom + factor(Eieform) + Alder + I(Alder^2) + har_fellesgjeld, 
                       data = subset(data_clean, Boligtype == "Leilighet"))

model_enebolig <- lm(log(Realpris) ~ Avstand_km + BRA + Soverom + factor(Eieform) + Alder + I(Alder^2) + har_fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Enebolig"))

model_rekkehus <- lm(log(Realpris) ~ Avstand_km + BRA + Soverom + factor(Eieform) + Alder + I(Alder^2) + har_fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Rekkehus"))

model_tomanns <- lm(log(Realpris) ~ Avstand_km + BRA + Soverom + factor(Eieform) + Alder + I(Alder^2) + har_fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Tomannsbolig"))

# Vise resultater
library(modelsummary)
modelsummary(list(Leilighet = model_leilighet, Enebolig = model_enebolig, 
                  Rekkehus = model_rekkehus, Tomannsbolig = model_tomanns),
             output = "flextable")

```

Resultat:

For leiligheter og eneboliger er effekten av avstand til sentrum negativ, noe som betyr at prisene synker med økende avstand.

For rekkehus ser det derimot ut til å være en positiv sammenheng, noe som kan indikere at rekkehus nær sentrum er relativt billigere enn de som ligger lengre unna.

For tomannsboliger er effekten nær null, noe som kan tyde på at avstand til sentrum ikke spiller en stor rolle for denne boligtypen.

Sammenhengen er sterkest for leiligheter, der en økning i avstand til sentrum gir en tydelig prisreduksjon.
Gjeldene for førstegangskjøpere

Har effekten endret seg gjennom årene, 2008-2024?
JA

-   Før 2016: Ingen signifikante effekter av avstand til sentrum.

-   **2016-2019:** Noen svakere positive sammenhenger begynner å dukke opp.
    For 2016 og 2017 er effekten signifikant på 5 % nivå.

-   **2020-2024:** Effekten av avstand blir gradvis sterkere, spesielt fra 2022 til 2024, der sammenhengen er signifikant og positiv.

### Robust analyse

```{r}
#| label: tbl-robustleil
#| tbl-cap: Modell resultater for robust.
library(flextable)
data_leilighet <- subset(data_clean, Boligtype == "Leilighet") |> 
  mutate(
    Salgsår = fct(as.character(Salgsår)),
    Eieform = fct(as.character(Eieform))
  )

model_leilighet <- lm(
  log(Realpris) ~ BRA * Salgsår + Soverom  + Eieform +  Alder + I(Alder^2) + Fellesgjeld + Avstand_km, data = data_leilighet)

model_leilighet |> as_flextable() |> 
  line_spacing(space = 0.3)

```

Som vi ser av @tbl-robustleil ....

```{r}
#| label: tbl-robustenebolig
#| tbl-cap: Modell resultater for robust.
library(flextable)
data_enebolig <- subset(data_clean, Boligtype == "Enebolig") |> 
  mutate(
    Salgsår = fct(as.character(Salgsår)),
    Eieform = fct(as.character(Eieform)),
    Grunnkrets = fct(as.character(Grunnkrets))
  )

model_enebolig <- lm(
  log(Realpris) ~ BRA * Salgsår + Soverom  + Eieform +  Alder + I(Alder^2) + Fellesgjeld + Avstand_km, data = data_enebolig)

model_enebolig |> as_flextable() |> 
  line_spacing(space = 0.3)

```

```{r}
#| label: tbl-robustrekkehus
#| tbl-cap: Modell resultater for robust.
library(flextable)
data_rekkehus <- subset(data_clean, Boligtype == "Rekkehus") |> 
  mutate(
    Salgsår = fct(as.character(Salgsår)),
    Eieform = fct(as.character(Eieform)),
    Grunnkrets = fct(as.character(Grunnkrets))
  )

model_rekkehus <- lm(
  log(Realpris) ~ BRA * Salgsår + Soverom  + Eieform +  Alder + I(Alder^2) + Fellesgjeld + Avstand_km, data = data_rekkehus)

model_rekkehus |> as_flextable() |> 
  line_spacing(space = 0.3)

```

```{r}
#| label: tbl-robusttomannsbolig
#| tbl-cap: Modell resultater for robust.
library(flextable)
data_tomanns <- subset(data_clean, Boligtype == "Tomannsbolig") |> 
  mutate(
    Salgsår = fct(as.character(Salgsår)),
    Eieform = fct(as.character(Eieform)),
    Grunnkrets = fct(as.character(Grunnkrets))
  )

model_tomanns <- lm(
  log(Realpris) ~ BRA * Salgsår + Soverom  + Eieform +  Alder + I(Alder^2) + Fellesgjeld + Avstand_km, data = data_tomanns)

model_tomanns |> as_flextable() |> 
  line_spacing(space = 0.3)

```

```{r}
# Modell for leiligheter
model_leilighet <- lm(log(Realpris) ~ BRA + Soverom + Eieform + Alder + factor(Salgsår) + har_fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Leilighet"))

# Modell for eneboliger
model_enebolig <- lm(log(Realpris) ~ BRA + Soverom + Eieform + Alder + factor(Salgsår) + har_fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Enebolig"))

# Modell for rekkehus
model_rekkehus <- lm(log(Realpris) ~ BRA + Soverom + Eieform + Alder + factor(Salgsår) + har_fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Rekkehus"))

model_tomannsbolig <- lm(log(Realpris) ~ BRA + Soverom + Eieform + Alder + factor(Salgsår) + har_fellesgjeld, 
                         data = subset(data_clean, Boligtype == "Tomannsbolig"))

# Se resultatene
summary(model_leilighet)
summary(model_enebolig)
summary(model_rekkehus)
summary(model_tomannsbolig)
```

```{r}
models <- list(
  "Leilighet" = model_leilighet,
  "Enebolig" = model_enebolig,
  "Rekkehus" = model_rekkehus,
  "Tomannsbolig" = model_tomannsbolig
)

```

```{r}
# Last inn nødvendig pakke
library(flextable)

# Lag en tabell med modelsummary og konverter til flextable
table_flex <- modelsummary(models, output = "flextable")

# Tilpass utseendet hvis ønskelig
table_flex <- table_flex %>%
  autofit() %>% 
  theme_booktabs()

# Vis tabellen
table_flex

```

```{r}
# Liste over boligtyper
boligtyper <- unique(data_clean$Boligtype)  

# Opprett en liste for lagring av tabeller
ci_lister <- list()

for (bt in boligtyper) {
  # Filtrer data for hver boligtype
  subset_data <- subset(data_clean, Boligtype == bt)
  
  # Kjør regresjonsmodell for den aktuelle boligtypen
  model_bt <- lm(log(Realpris) ~ BRA + Soverom + Byggeår + Eieform + factor(Salgsår), 
                 data = subset_data)

  # Lag konfidensintervall-tabell
  ci_table <- as.data.frame(confint(model_bt, level = 0.95))
  colnames(ci_table) <- c("Nedre grense", "Øvre grense")  
  ci_table$Variabel <- rownames(confint(model_bt, level = 0.95))  
  ci_table <- ci_table[, c("Variabel", "Nedre grense", "Øvre grense")]  

  # Lag en flextable og lagre i listen
  ci_lister[[bt]] <- flextable(ci_table) |>
    theme_vanilla() |>
    set_table_properties(layout = "autofit") |>
    set_caption(paste("Konfidensintervaller for", bt))
}

# For å vise tabellen for en spesifikk boligtype, f.eks. "Leilighet":
ci_lister[["Leilighet"]]
```

```{r}
# Liste over boligtyper
boligtyper <- unique(data_clean$Boligtype)  

# Opprett en liste for lagring av tabeller
ci_lister <- list()

for (bt in boligtyper) {
  # Filtrer data for hver boligtype
  subset_data <- subset(data_clean, Boligtype == bt)
  
  # Kjør regresjonsmodell for den aktuelle boligtypen
  model_bt <- lm(log(Realpris) ~ BRA + Soverom + Byggeår + Eieform + factor(Salgsår), 
                 data = subset_data)

  # Lag konfidensintervall-tabell
  ci_table <- as.data.frame(confint(model_bt, level = 0.95))
  colnames(ci_table) <- c("Nedre grense", "Øvre grense")  
  ci_table$Variabel <- rownames(confint(model_bt, level = 0.95))  
  ci_table <- ci_table[, c("Variabel", "Nedre grense", "Øvre grense")]  

  # Lag en flextable og lagre i listen
  ci_lister[[bt]] <- flextable(ci_table) |>
    theme_vanilla() |>
    set_table_properties(layout = "autofit") |>
    set_caption(paste("Konfidensintervaller for", bt))
}

# For å vise tabellen for en spesifikk boligtype, f.eks. "Leilighet":
ci_lister[["Enebolig"]]

```

```{r}
# Liste over boligtyper
boligtyper <- unique(data_clean$Boligtype)  

# Opprett en liste for lagring av tabeller
ci_lister <- list()

for (bt in boligtyper) {
  # Filtrer data for hver boligtype
  subset_data <- subset(data_clean, Boligtype == bt)
  
  # Kjør regresjonsmodell for den aktuelle boligtypen
  model_bt <- lm(log(Realpris) ~ BRA + Soverom + Byggeår + Eieform + factor(Salgsår), 
                 data = subset_data)

  # Lag konfidensintervall-tabell
  ci_table <- as.data.frame(confint(model_bt, level = 0.95))
  colnames(ci_table) <- c("Nedre grense", "Øvre grense")  
  ci_table$Variabel <- rownames(confint(model_bt, level = 0.95))  
  ci_table <- ci_table[, c("Variabel", "Nedre grense", "Øvre grense")]  

  # Lag en flextable og lagre i listen
  ci_lister[[bt]] <- flextable(ci_table) |>
    theme_vanilla() |>
    set_table_properties(layout = "autofit") |>
    set_caption(paste("Konfidensintervaller for", bt))
}

# For å vise tabellen for en spesifikk boligtype, f.eks. "Leilighet":
ci_lister[["Rekkehus"]]

```

```{r}
# Liste over boligtyper
boligtyper <- unique(data_clean$Boligtype)  

# Opprett en liste for lagring av tabeller
ci_lister <- list()

for (bt in boligtyper) {
  # Filtrer data for hver boligtype
  subset_data <- subset(data_clean, Boligtype == bt)
  
  # Kjør regresjonsmodell for den aktuelle boligtypen
  model_bt <- lm(log(Realpris) ~ BRA + Soverom + Byggeår + Eieform + factor(Salgsår), 
                 data = subset_data)

  # Lag konfidensintervall-tabell
  ci_table <- as.data.frame(confint(model_bt, level = 0.95))
  colnames(ci_table) <- c("Nedre grense", "Øvre grense")  
  ci_table$Variabel <- rownames(confint(model_bt, level = 0.95))  
  ci_table <- ci_table[, c("Variabel", "Nedre grense", "Øvre grense")]  

  # Lag en flextable og lagre i listen
  ci_lister[[bt]] <- flextable(ci_table) |>
    theme_vanilla() |>
    set_table_properties(layout = "autofit") |>
    set_caption(paste("Konfidensintervaller for", bt))
}

# For å vise tabellen for en spesifikk boligtype, f.eks. "Leilighet":
ci_lister[["Tomannsbolig"]]

```

### Predikere priser

**annen måte å predikere priser: OBS alle boligtyper**

```{r}
sigma2 <- mean(residuals(model_log)^2)
```

```{r}
library(dplyr)

prediker_boligtype <- function(data, boligtype_navn) {
  data_bolig <- data_clean %>%
    filter(Boligtype == boligtype_navn)
  
  prediksjoner <- predict(model_log, newdata = data_bolig)
  
  data_bolig <- data_bolig %>%
    mutate(
      Predikert_logpris = prediksjoner,
      Predikert_Pris = exp(Predikert_logpris),  # uten korreksjon
      Predikert_Pris_Adj = exp(Predikert_logpris) * exp(sigma2 / 2)  # med korreksjon
    )
  
  return(data_bolig)
}

```

```{r}
# Liste over boligtypene i datasettet
data_clean$Salgsår <- as.factor(data_clean$Salgsår)

boligtyper <- c("Leilighet", "Enebolig", "Rekkehus", "Tomannsbolig")

# Kjør prediksjon for hver boligtype og bind sammen
data_predikert <- lapply(boligtyper, function(bt) prediker_boligtype(data_clean, bt)) %>%
  bind_rows()

```

```{r}
summary_stats <- data_predikert %>%
  group_by(Boligtype) %>%
  summarise(
    Gjennomsnitt_Predikert = mean(Predikert_Pris, na.rm = TRUE),
    Gjennomsnitt_Predikert_Adj = mean(Predikert_Pris_Adj, na.rm = TRUE),
    Gjennomsnitt_Faktisk = mean(Realpris, na.rm = TRUE),
    Median_Predikert = median(Predikert_Pris, na.rm = TRUE),
    Median_Predikert_Adj = median(Predikert_Pris_Adj, na.rm = TRUE),
    Median_Faktisk = median(Realpris, na.rm = TRUE)
  )

```

OBS!
den første koden nå viser med predikert og justert mens den nr 2 viser kun justert.

```{r}
library(flextable)

tbl_summary <- summary_stats %>%
  flextable() %>%
  colformat_num(
    j = c("Gjennomsnitt_Predikert", "Gjennomsnitt_Predikert_Adj",
          "Gjennomsnitt_Faktisk", "Median_Predikert",
          "Median_Predikert_Adj", "Median_Faktisk"),
    digits = 0, big.mark = " "
  ) %>%
  set_caption("Sammenligning av predikert og faktisk boligpris per boligtype") %>%
  autofit()

tbl_summary

```

```{r}
# Ny tabell med bare justerte og faktiske verdier
tbl_summary_adj <- summary_stats %>%
  select(Boligtype, 
         Gjennomsnitt_Predikert_Adj, 
         Gjennomsnitt_Faktisk, 
         Median_Predikert_Adj, 
         Median_Faktisk) %>%
  flextable() %>%
  colformat_num(
    j = c("Gjennomsnitt_Predikert_Adj", "Gjennomsnitt_Faktisk",
          "Median_Predikert_Adj", "Median_Faktisk"),
    digits = 0, big.mark = " "
  ) %>%
  set_caption("Sammenligning av justert predikert og faktisk boligpris per boligtype") %>%
  autofit()

tbl_summary_adj

```

Leiligheter:

```{r}
# Filtrer kun leiligheter
df_leil <- data_clean %>%
  filter(Boligtype == "Leilighet")
```

```{r}
sigma3 <- mean(residuals(model_log_leil)^2)
```

```{r}
# Funksjon for prediksjon per eieform
prediker_eieform <- function(data, eieform_navn) {
  data_eier <- data %>%
    filter(Eieform == eieform_navn)
  
  prediksjoner <- predict(model_log_leil, newdata = data_eier)
  
  data_eier <- data_eier %>%
    mutate(
      Predikert_logpris = prediksjoner,
      Predikert_Pris = exp(Predikert_logpris),
      Predikert_Pris_Adj = exp(Predikert_logpris) * exp(sigma3 / 2)
    )
  
  return(data_eier)
}

```

```{r}
eieformer <- c("Selveier", "Borettslag")  # Tilpass om nødvendig

data_leil_predikert <- lapply(eieformer, function(ef) prediker_eieform(df_leil, ef)) %>%
  bind_rows()

```

```{r}
summary_leil <- data_leil_predikert %>%
  group_by(Eieform) %>%
  summarise(
    Gjennomsnitt_Predikert_Adj = mean(Predikert_Pris_Adj, na.rm = TRUE),
    Gjennomsnitt_Faktisk = mean(Realpris, na.rm = TRUE),
    Median_Predikert_Adj = median(Predikert_Pris_Adj, na.rm = TRUE),
    Median_Faktisk = median(Realpris, na.rm = TRUE)
  )

```

```{r}
library(flextable)

tbl_leil <- summary_leil %>%
  flextable() %>%
  colformat_num(
    j = c("Gjennomsnitt_Predikert_Adj", "Gjennomsnitt_Faktisk",
          "Median_Predikert_Adj", "Median_Faktisk"),
    digits = 0, big.mark = " "
  ) %>%
  set_caption("Sammenligning av justert predikert og faktisk pris: Selveier vs. Borettslag") %>%
  autofit()

tbl_leil

```

```{r}
summary_leil <- data_leil_predikert %>%
  group_by(Eieform) %>%
  summarise(
    Gjennomsnitt_Predikert = mean(Predikert_Pris, na.rm = TRUE),
    Gjennomsnitt_Predikert_Adj = mean(Predikert_Pris_Adj, na.rm = TRUE),
    Gjennomsnitt_Faktisk = mean(Realpris, na.rm = TRUE),
    Median_Predikert = median(Predikert_Pris, na.rm = TRUE),
    Median_Predikert_Adj = median(Predikert_Pris_Adj, na.rm = TRUE),
    Median_Faktisk = median(Realpris, na.rm = TRUE)
  )

```

```{r}
tbl_leil <- summary_leil %>%
  flextable() %>%
  colformat_num(
    j = c("Gjennomsnitt_Predikert", "Gjennomsnitt_Predikert_Adj",
          "Gjennomsnitt_Faktisk", "Median_Predikert",
          "Median_Predikert_Adj", "Median_Faktisk"),
    digits = 0, big.mark = " "
  ) %>%
  set_caption("Sammenligning av predikert og faktisk pris: Selveier vs. Borettslag") %>%
  autofit()

tbl_leil

```

Soverom:

```{r}
df_leil_1_2 <- data_clean %>%
  filter(Boligtype == "Leilighet", Soverom %in% c(1, 2))

```

```{r}
model_leil_sr <- lm(log(Realpris) ~ BRA + Alder + Eieform + I(Alder^2) + Salgsår + Avstand_km,
                    data = df_leil_1_2)

```

```{r}
sigma2_sr <- mean(residuals(model_leil_sr)^2)

```

```{r}
prediker_sov_eie <- function(data, ant_sov, eieform_navn) {
  data_subset <- data %>%
    filter(Soverom == ant_sov, Eieform == eieform_navn)
  
  prediksjoner <- predict(model_leil_sr, newdata = data_subset)
  
  data_subset <- data_subset %>%
    mutate(
      Predikert_logpris = prediksjoner,
      Predikert_Pris = exp(Predikert_logpris),
      Predikert_Pris_Adj = exp(Predikert_logpris) * exp(sigma2_sr / 2),
      Kombinasjon = paste0(Soverom, " rom – ", Eieform)
    )
  
  return(data_subset)
}

```

```{r}
sov <- c(1, 2)
eieformer <- c("Selveier", "Borettslag")

data_leil_sr_predikert <- expand.grid(sov, eieformer) %>%
  rename(Soverom = Var1, Eieform = Var2) %>%
  pmap_dfr(~ prediker_sov_eie(df_leil_1_2, ..1, ..2))

```

```{r}
summary_sr <- data_leil_sr_predikert %>%
  group_by(Kombinasjon) %>%
  summarise(
    Gjennomsnitt_Predikert = mean(Predikert_Pris, na.rm = TRUE),
    Gjennomsnitt_Predikert_Adj = mean(Predikert_Pris_Adj, na.rm = TRUE),
    Gjennomsnitt_Faktisk = mean(Realpris, na.rm = TRUE),
    Median_Predikert = median(Predikert_Pris, na.rm = TRUE),
    Median_Predikert_Adj = median(Predikert_Pris_Adj, na.rm = TRUE),
    Median_Faktisk = median(Realpris, na.rm = TRUE)
  )

```

```{r}
tbl_sr <- summary_sr %>%
  flextable() %>%
  colformat_num(
    j = c("Gjennomsnitt_Predikert", "Gjennomsnitt_Predikert_Adj",
          "Gjennomsnitt_Faktisk", "Median_Predikert",
          "Median_Predikert_Adj", "Median_Faktisk"),
    digits = 0, big.mark = " "
  ) %>%
  set_caption("Sammenligning av predikert og faktisk pris for 1 og 2-roms leiligheter") %>%
  autofit()

tbl_sr

```

```{r}
tbl_sr_kort <- summary_sr %>%
  select(Kombinasjon,
         Gjennomsnitt_Predikert_Adj,
         Gjennomsnitt_Faktisk,
         Median_Predikert_Adj,
         Median_Faktisk) %>%
  flextable() %>%
  colformat_num(
    j = c("Gjennomsnitt_Predikert_Adj", "Gjennomsnitt_Faktisk",
          "Median_Predikert_Adj", "Median_Faktisk"),
    digits = 0, big.mark = " "
  ) %>%
  set_caption("Justert predikert og faktisk pris for 1 og 2-roms leiligheter (Selveier og Borettslag)") %>%
  autofit()

tbl_sr_kort

```

### Konfidensintervall igjen

```{r}
data_clean <- data_clean %>%
  mutate(
    Rekkehus_Selveier = ifelse(Boligtype == "Rekkehus" & Eieform == "Selveier", 1, 0),
    Tomannsbolig_Selveier = ifelse(Boligtype == "Tomannsbolig" & Eieform == "Selveier", 1, 0)
  )
```

```{r}
data_clean <- data_clean %>%
  mutate(
    Leilighet_Selveier = ifelse(Boligtype == "Leilighet" & Eieform == "Selveier", 1, 0),
    Rekkehus_Selveier = ifelse(Boligtype == "Rekkehus" & Eieform == "Selveier", 1, 0),
    Tomannsbolig_Selveier = ifelse(Boligtype == "Tomannsbolig" & Eieform == "Selveier", 1, 0)
  )

```

```{r}
# 1. Opprett ny variabel for log-transformert pris
data_clean <- data_clean %>%
  mutate(LogRealpris = log(Realpris))

# 2. Del opp i tre perioder
data_2008_2013 <- data_clean %>% filter(Salgsår >= 2008, Salgsår <= 2013)
data_2014_2019 <- data_clean %>% filter(Salgsår >= 2014, Salgsår <= 2019)
data_2020_2024 <- data_clean %>% filter(Salgsår >= 2020, Salgsår <= 2024)

# 3. Sett opp recipe (felles for alle)
library(recipes)
recipe_spec <- recipe(LogRealpris ~ BRA + Soverom + Alder + har_fellesgjeld + Avstand_km + Boligtype + Eieform + Leilighet_Selveier + Rekkehus_Selveier + Tomannsbolig_Selveier,
                      data = data_clean) %>%
  step_mutate(
    Alder = as.numeric(Alder),
    Eieform = as.factor(Eieform),
    Boligtype = as.factor(Boligtype),
)

# 4. Sett opp modell og workflow
library(parsnip)
library(workflows)

model_spec <- linear_reg() %>%
  set_engine("lm")

workflow_spec <- workflow() %>%
  add_model(model_spec) %>%
  add_recipe(recipe_spec)

# 5. Tren modellene for hver periode
model_fit_2008_2013 <- workflow_spec %>% fit(data = data_2008_2013)
model_fit_2014_2019 <- workflow_spec %>% fit(data = data_2014_2019)
model_fit_2020_2024 <- workflow_spec %>% fit(data = data_2020_2024)


```

```{r}
library(broom)

point_estimates_df <- tidy(model_log)
point_estimates <- setNames(point_estimates_df$estimate, point_estimates_df$term)

```

```{r}
library(parsnip)

ci_2008_2013 <- confint(extract_fit_engine(model_fit_2008_2013))
ci_2014_2019 <- confint(extract_fit_engine(model_fit_2014_2019))
ci_2020_2024 <- confint(extract_fit_engine(model_fit_2020_2024))

```

```{r}
rownames(ci_2008_2013) <- rownames(ci_2008_2013)
rownames(ci_2014_2019) <- rownames(ci_2014_2019)
rownames(ci_2020_2024) <- rownames(ci_2020_2024)

ci_2008_2013_df <- as.data.frame(ci_2008_2013)
ci_2014_2019_df <- as.data.frame(ci_2014_2019)
ci_2020_2024_df <- as.data.frame(ci_2020_2024)

```

```{r}
# Hent punktestimatene fra hovedmodellen (model_log)
library(broom)

point_estimates_df <- tidy(model_log)
point_estimates <- setNames(point_estimates_df$estimate, point_estimates_df$term)

# Finn felles variabler (kun de som finnes i alle modeller)
common_vars <- Reduce(intersect, list(
  names(point_estimates),
  rownames(ci_2008_2013_df),
  rownames(ci_2014_2019_df),
  rownames(ci_2020_2024_df)
))

# Filtrer til bare felles variabler
point_estimates_filtered <- point_estimates[common_vars]
ci_2008_2013_filtered <- ci_2008_2013_df[common_vars, ]
ci_2014_2019_filtered <- ci_2014_2019_df[common_vars, ]
ci_2020_2024_filtered <- ci_2020_2024_df[common_vars, ]

# Lag samlet sammenligningstabell
comparison_df <- data.frame(
  Variable = common_vars,
  Punktestimat_Hele = point_estimates_filtered,
  CI_Low_2008_2013 = ci_2008_2013_filtered[, 1],
  CI_High_2008_2013 = ci_2008_2013_filtered[, 2],
  CI_Low_2014_2019 = ci_2014_2019_filtered[, 1],
  CI_High_2014_2019 = ci_2014_2019_filtered[, 2],
  CI_Low_2020_2024 = ci_2020_2024_filtered[, 1],
  CI_High_2020_2024 = ci_2020_2024_filtered[, 2]
)

# Legg til TRUE/FALSE for om punktestimatet fra hele perioden ligger innenfor CI
comparison_df <- comparison_df %>%
  mutate(
    In_CI_2008_2013 = Punktestimat_Hele >= CI_Low_2008_2013 & Punktestimat_Hele <= CI_High_2008_2013,
    In_CI_2014_2019 = Punktestimat_Hele >= CI_Low_2014_2019 & Punktestimat_Hele <= CI_High_2014_2019,
    In_CI_2020_2024 = Punktestimat_Hele >= CI_Low_2020_2024 & Punktestimat_Hele <= CI_High_2020_2024
  )

# Vis resultatet
print(comparison_df)

```

```{r}
# Lag komplett liste over variabler fra hovedmodellen
alle_var <- names(point_estimates)

# Funksjon for å hente lav/høy CI eller returnere NA hvis variabelen ikke finnes
hent_ci <- function(ci_df, varnavn, kol) {
  if (varnavn %in% rownames(ci_df)) {
    return(ci_df[varnavn, kol])
  } else {
    return(NA)
  }
}

# Bygg sammenligningstabell
comparison_df <- data.frame(
  Variable = alle_var,
  Punktestimat_Hele = point_estimates[alle_var],
  CI_Low_2008_2013 = sapply(alle_var, hent_ci, ci_df = ci_2008_2013_df, kol = 1),
  CI_High_2008_2013 = sapply(alle_var, hent_ci, ci_df = ci_2008_2013_df, kol = 2),
  CI_Low_2014_2019 = sapply(alle_var, hent_ci, ci_df = ci_2014_2019_df, kol = 1),
  CI_High_2014_2019 = sapply(alle_var, hent_ci, ci_df = ci_2014_2019_df, kol = 2),
  CI_Low_2020_2024 = sapply(alle_var, hent_ci, ci_df = ci_2020_2024_df, kol = 1),
  CI_High_2020_2024 = sapply(alle_var, hent_ci, ci_df = ci_2020_2024_df, kol = 2)
) |> 
  filter(
    !Variable %in% c("I(Alder^2)", "BoligtypeEnebolig", "EieformBorettslag")
  )

```

**NB!!**Denne koden gjør at jeg får opp False og True, ikke kjør den om du ikke øsnsker det.

```{r}
comparison_df$Utenfor_CI_2008_2013 <- with(comparison_df,
  Punktestimat_Hele < CI_Low_2008_2013 | Punktestimat_Hele > CI_High_2008_2013)

comparison_df$Utenfor_CI_2014_2019 <- with(comparison_df,
  Punktestimat_Hele < CI_Low_2014_2019 | Punktestimat_Hele > CI_High_2014_2019)

comparison_df$Utenfor_CI_2020_2024 <- with(comparison_df,
  Punktestimat_Hele < CI_Low_2020_2024 | Punktestimat_Hele > CI_High_2020_2024)
```

```{r}
library(flextable)

flextable(comparison_df) %>%
  set_caption("Sammenligning av punktestimat og 95 % konfidensintervall fra ulike perioder") %>%
  autofit()

```

```{r}
library(flextable)

flextable(comparison_df) %>%
  set_caption("Sammenligning av punktestimat og 95 % konfidensintervall fra ulike perioder") %>%
  autofit()

```
