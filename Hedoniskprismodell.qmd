---
title: "Hedoniskprismodell"
format: 
  html: default
  typst:
    papersize: a4
    fontsize: 11pt
editor: visual
---

```{r}
#| label: setup
#| message: false
library(tidyverse)
library(dplyr)
library(readxl)
library(stringr)
library(lubridate)
library(flextable)
library(tidymodels)
library(knitr)
library(kableExtra)
library(broom)
library(sandwich)
library(lmtest)
```

### Hedonisk prismodell

Laster inn datasett og filtrerer

```{r}
data <- read_excel("2025_HVL_Stromme_Data.xlsx")
```

```{r}
avstander_haugesund <- read_excel("avstander_haugesund.xlsx")
```

```{r}
grunnkretser_navn <- read_excel("grunnkretser_navn.xlsx")
```

```{r}
avstander_haugesund <- avstander_haugesund %>%
  rename(Avstand_km = network_cost_km)
```

```{r}
grunnkretser_navn <- grunnkretser_navn %>%
  rename(Grunnkrets = Grunnkretsnavn)
```

```{r}
# Behold kun de nødvendige kolonnene i avstander_haugesund
avstander_haugesund <- avstander_haugesund %>%
  select(Grunnkretskode, Avstand_km)
```

```{r}
avstander_haugesund <- avstander_haugesund %>%
  left_join(grunnkretser_navn, by = "Grunnkretskode")
```

```{r}
data <- data %>%
  mutate(Grunnkrets = str_to_title(Grunnkrets),
         Kommune = str_to_title(Kommune)
         )

```

```{r}
data <- data |> 
  left_join(avstander_haugesund, by = "Grunnkrets")
```

```{r}
# Konverter begge Grunnkrets-kolonnene til character
data$Grunnkrets <- as.character(data$Grunnkrets)
avstander_haugesund$Grunnkrets <- as.character(avstander_haugesund$Grunnkrets)

# Nå kan vi gjøre join
data <- data %>%
  left_join(avstander_haugesund, by = "Grunnkrets")

```

```{r}
# Konverter til datoformat (hvis nødvendig)
data$Salgsdato <- as.Date(data$Salgsdato, format="%d.%m.%Y")

# Trekk ut året og lag "Salgsår"-variabel
data$Salgsår <- year(data$Salgsdato)

# Sjekk at endringen er gjort riktig
table(data$Salgsår)

# Fjern "Salgsdato" hvis du ikke trenger den
data$Salgsdato <- NULL

```

###### Setter inn KPI

```{r}
kpi_data <- data.frame(
  År = 2008:2024,
  KPI = c(88.0, 89.9, 92.1, 93.3, 93.9, 95.9, 97.9, 100.0, 103.6, 105.5, 108.4, 
          110.8, 112.2, 116.1, 122.8, 129.6, 133.6) 
)

kpi_data$KPI_justert <- (kpi_data$KPI / kpi_data$KPI[kpi_data$År == 2008]) * 100
```

```{r}
data <- merge(data, kpi_data, by.x = "Salgsår", by.y = "År", all.x = TRUE)

summary(data$KPI)
table(is.na(data$KPI))
```

###### Får realpris

```{r}
data$Realpris <- (data$Pris + data$Fellesgjeld) * (100 / data$KPI)
```

```{r}
library(ggplot2)

ggplot(data, aes(x = Salgsår)) +
  geom_line(aes(y = Pris, color = "Nominell pris")) +
  geom_line(aes(y = Realpris, color = "Realpris (2008-nivå)")) +
  labs(title = "Sammenligning av nominelle priser og realpriser",
       y = "Pris", x = "År") +
  theme_minimal()

```

```{r}
# Forsøk å lage `Alder` på en trygg måte
data <- data %>%
  mutate(
    Byggeår = as.numeric(as.character(Byggeår)),  # Konverter til numerisk
    Salgsår = as.numeric(as.character(Salgsår)),  # Konverter til numerisk
    Alder = ifelse(!is.na(Byggeår) & !is.na(Salgsår), Salgsår - Byggeår, NA)  # Beregn alder
  )

# Sjekk resultatet
summary(data$Alder)

```

```{r}
colSums(is.na(data))

```

```{r}
# Fjerner rader med NA i de viktigste variablene
data_clean <- data %>%
  filter(!is.na(BRA) & !is.na(Soverom) & !is.na(Byggeår) & !is.na(Alder))

# Sjekker hvor mange rader som er igjen
nrow(data_clean)

```

###### Legger til Alder\^2

```{r}
# Filtrer ut boliger eldre enn 150 år
data_clean <- data_clean %>% filter(Alder <= 2000)

# Sjekk fordeling etter filtrering
summary(data_clean$Alder)
hist(data_clean$Alder, breaks = 50, main = "Aldersfordeling etter filtrering")
```

sletter variabler jeg ikke trenger

```{r}
# Fjern unødvendige variabler
data_clean <- data_clean %>%
  select(-EiendomsID, -Kommune, -Etasje, -Tomtestørrelse, 
       -Grunnkretskode.x, -Avstand_km.x)

# Sjekk at variablene er fjernet
glimpse(data_clean)  # Eller bruk: colnames(data_clean)

```

```{r}

data_clean <- data_clean %>%
  rename(
    Grunnkretskode = Grunnkretskode.y,
    Avstand_km = Avstand_km.y
  )

```

setter fellesgjeld til Dummy 0 og 1

```{r}
data_clean$har_fellesgjeld <- ifelse(data_clean$Fellesgjeld > 0, 1, 0)

```

skiller mellom leilighet selveier og leilighet borettslag (**denne koden er ikke kjørt!!**!!)

```{r}
# Sørg for at Boligtype og Eieform er tekst
data_clean$Boligtype <- as.character(data_clean$Boligtype)
data_clean$Eieform <- as.character(data_clean$Eieform)

# Oppdater boligtype: Splitt "Leilighet" i to kategorier
data_clean$Boligtype[data_clean$Boligtype == "Leilighet" & data_clean$Eieform == "Selveier"] <- "Leilighet_Selveier"
data_clean$Boligtype[data_clean$Boligtype == "Leilighet" & data_clean$Eieform == "Borettslag"] <- "Leilighet_Borettslag"

# Konverter tilbake til faktor og sett ønsket rekkefølge (rekkehus som referanse)
data_clean$Boligtype <- factor(data_clean$Boligtype, levels = c("Rekkehus", "Enebolig", "Tomannsbolig", "Leilighet_Selveier", "Leilighet_Borettslag"))

# Sjekk resultatet
table(data_clean$Boligtype)
```

#### **Lineær regresjon med Realpris (justert for KPI) som avhengig variabel:**

```{r}
model1 <- lm(Realpris ~ BRA + Soverom + Byggeår + Boligtype + Eieform + Grunnkrets + Alder + factor(Salgsår) + Fellesgjeld, 
            data = data_clean)
summary(model1)
```

#### Log transformasjon:

```{r}
# Sett ønskede referansekategorier
data_clean$Boligtype <- relevel(factor(data_clean$Boligtype), ref = "Rekkehus")
data_clean$Eieform <- relevel(factor(data_clean$Eieform), ref = "Selveier")
data_clean$Salgsår <- relevel(factor(data_clean$Salgsår), ref = "2008")

```

```{r}
# Log-transformert regresjon
#| label: tbl-logreg
#| tbl-cap: Regresjonsmodell
model_log <- data_clean |> 
  mutate(
    Boligtype = fct(as.character(Boligtype)),
    Eieform = fct(as.character(Eieform)),
    Salgsår = fct(as.character(Salgsår))
  ) %>%
  lm(
    formula = log(Realpris) ~ BRA + Soverom + Alder + I(Alder^2) + har_fellesgjeld + Avstand_km + Boligtype + Eieform + Salgsår,
    data = .
    )

summary(model_log)

model_log |>  as_flextable() |> 
line_spacing(space = 0.3)

```

```{r}
ggplot(data_clean, aes(x = Alder, y = log(Realpris))) +
  geom_point(alpha = 0.3) +
  geom_smooth(method = "lm", formula = y ~ poly(x, 2), se = TRUE, color = "blue") +
  labs(title = "Sammenheng mellom boligpris og alder",
       x = "Alder på bolig",
       y = "Log(realpris)")
```

Hvilke attributter påvirker boligprisen mest:

```{r}

# Beregner gjennomsnitt for hver grunnkrets
avg_values <- data_clean %>%
  group_by(Grunnkrets) %>%
  summarise(
    Gjennomsnitt_BRA = mean(BRA, na.rm = TRUE),
    Gjennomsnitt_Byggeår = mean(Byggeår, na.rm = TRUE),
    Gjennomsnitt_Fellesgjeld = mean(Fellesgjeld, na.rm = TRUE),
    Antall_boliger = n()
  ) %>%
  arrange(desc(Gjennomsnitt_BRA))  # Sorterer etter største boliger

# Viser resultatet
print(avg_values)

```

```{r}

```

```{r}
coeff_df <- as.data.frame(coef(summary(model_log)))
coeff_df$Variable <- rownames(coeff_df)

# Filtrer kun grunnkretsvariablene
grunnkrets_effekt <- coeff_df %>%
  filter(grepl("Grunnkrets", Variable)) %>%
  arrange(desc(Estimate))  # Sorterer etter høyest effekt

# Viser de 10 dyreste og billigste grunnkretsene
head(grunnkrets_effekt, 10)  # Topp 10 dyreste
tail(grunnkrets_effekt, 10)  # Topp 10 billigste

```

#### Heteroskedastisitet

```{r}
library(lmtest)

# Sjekker om heteroskedastisitet er til stede
bptest(model_log2)

```

```{r}
#for finere resultat:
library(lmtest)
library(flextable)

# Kjør testen
bp_result <- bptest(model_log)

# Lag en data frame med testresultatene
tbl_bp_test <- data.frame(
  Test = "Breusch-Pagan",
  BP_statistic = round(bp_result$statistic, 2),
  df = bp_result$parameter,
  p_value = format.pval(bp_result$p.value, digits = 4, eps = 0.0001)
)

# Konverter til en pen flextable-tabell
tbl_bp_test_flex <- flextable(tbl_bp_test) %>%
  set_caption("Breusch-Pagan test for heteroskedastisitet")

# Vis tabellen
tbl_bp_test_flex

```

For å sikre at modellestimatene er robuste, har jeg testet og justert for heteroskedastisitet i den log-transformerte hedoniske prismodellen.
For å teste for heteroskedastisitet ble Breusch-Pagan-testen gjennomført.
Testen har følgende hypoteser:

H₀: Variansen til residualene er konstant (homoskedastisitet).

H₁: Variansen til residualene er ikke konstant og avhenger av de uavhengige variablene (heteroskedastisitet).

Resultatet av testen viser en teststatistikk på BP = 1516.5, med en p-verdi \< 2.2e-16.
Siden p-verdien er svært lav, kan nullhypotesen om homoskedastisitet forkastes til fordel for alternativhypotesen.
Dette indikerer at det er heteroskedastisitet i modellen, noe som kan føre til upålitelige standardfeil og p-verdier.
For å korrigere for dette benyttes robuste standardfeil i videre analyser.

Videre bruker jeg regresjon mot robuste standardfeil.
**Første koden viser mange desimaler på p_value, så kjør den nedenfor så får man en finere modell:**

```{r}
# Installer og last inn nødvendige pakker
# dette er samme kode som under, bare FINERE pga flxtable
install.packages("flextable")
library(flextable)

# Lag en data frame med regresjonsresultatene
tbl_regresjon <- data.frame(
  Variabel = rownames(coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))),
  Estimate = coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))[,1],
  Std_Error = coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))[,2],
  t_value = coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))[,3],
  p_value = coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))[,4]
)

# Lag en flextable for å formatere tabellen pent
tbl_regresjon %>%
  flextable() %>%
  colformat_num(j = c("Estimate", "Std_Error", "t_value", "p_value"), digits = 4) %>%
  set_caption("Regresjonsresultater med robuste standardfeil") %>%
  autofit()


```

```{r}
tbl_regresjon %>%
  flextable() %>%
  colformat_num(j = c("Estimate", "Std_Error", "t_value"), digits = 4) %>%
  colformat_double(j = "p_value", digits = 5) %>%
  set_caption("Regresjonsresultater med robuste standardfeil") %>%
  autofit()

```

```{r}
library(sandwich)
library(lmtest)

# Kjør regresjon med robuste standardfeil
coeftest(model_log, vcov = vcovHC(model_log, type = "HC1"))
```

Resultat av heteroskedastisitet:

Videre ble det brukt regresjon med robuste standardfeil for å redusere risikoen for feiltolkning av standardfeilene som følge av heteroskedastisitet.
De viktigste funnene fra analysen forblir stort sett uendret.
Variablene BRA, soverom og alder er fortsatt sterkt signifikante og har forventet positiv sammenheng med boligpriser.
Eieform viser fremdeles at selveierboliger er betydelig dyrere enn borettslagsboliger.
Fellesgjeld har fortsatt en positiv sammenheng med boligprisene, noe som trolig skyldes at totalprisen inkluderer fellesgjeld.

Når det gjelder **tidsdummyer**, ser vi at flere år fortsatt har signifikante effekter på boligprisene.
Spesielt **2010-2024** har positive og signifikante koeffisienter, noe som indikerer at boligprisene har økt over tid.
På geografisk nivå bekreftes betydningen av beliggenhet i Haugesunds boligmarked.
Flere grunnkretser viser sterke effekter, spesielt **Ramsdalen, Rossabønakken, Fjellstemmen Vest og Torevarden**, som har positiv sammenheng med boligpriser, mens **Røvær har en negativ sammenheng**.

Samlet sett styrker justeringen for robuste standardfeil modellens pålitelighet ved å redusere risikoen for feiltolkning som følge av heteroskedastisitet.
Resultatene kan dermed tolkes med høyere grad av sikkerhet.

Denne koden tester **signifikansen til koeffisientene** i regresjonen din, men **med standardfeil justert for klynger på grunnkretsnivå**.

```{r}
coeftest(model_log, vcov = vcovCL(model_log, cluster = ~Grunnkrets))

```

forskjell fra den opprinnelige til den nye:

**Justering for heteroskedastisitet og betydningen for resultatene**

For å sikre robuste estimater og pålitelige hypotesetester, ble det gjennomført en Breusch-Pagan-test for heteroskedastisitet.
Testresultatet (BP = 4770.8, p-verdi \< 2.2e-16) indikerer sterk tilstedeværelse av heteroskedastisitet i modellen, noe som betyr at residualvariasjonen ikke er konstant.
Dette kan føre til at standardfeilene undervurderes og at p-verdiene blir feilberegnet.

For å korrigere for dette, ble det benyttet **cluster-robuste standardfeil**, der feilvariansen ble justert for grupperingsstrukturen i dataene, nærmere bestemt på grunnkretsnivå.
Etter denne justeringen ble det observert noen viktige endringer i resultatene:

-   **Standardfeilene økte noe**, noe som indikerer at usikkerheten i modellen tidligere var undervurdert.

-   **De viktigste forklaringsvariablene, som BRA, Soverom, Byggeår, Tomannsbolig, Selveier og Fellesgjeld, forble statistisk signifikante (p \< 0.001)**, noe som bekrefter deres betydning for boligpriser.

-   **BoligtypeLeilighet og BoligtypeRekkehus, som tidligere var signifikante, er ikke lenger det**, noe som kan tyde på at effekten av disse boligtypene var delvis drevet av geografiske faktorer.

-   **Effektene av enkelte grunnkretser ble også mindre signifikante etter justeringen**, noe som antyder at geografiske forskjeller har mindre direkte innvirkning på boligpriser enn først antatt, når andre variabler er kontrollert for.

Resultatene etter justeringen gir et mer realistisk bilde av hvilke faktorer som faktisk påvirker boligpriser.
Ved å bruke cluster-robuste standardfeil sikres mer pålitelige estimater, noe som styrker analysens validitet.

#### BRA og realpris, varierer over tid

```{r}
#| label: tbl-BRA_Realpris
#| tbl-cap: Interaksjonsmodell med BRA og Realpris
library(flextable)


model_interaksjon <- data_clean |> 
  mutate(
    Boligtype = fct(as.character(Boligtype)),
    Eieform = fct(as.character(Eieform)),
    Salgsår = fct(as.character(Salgsår)),
  )

model_interaksjon <- lm(
  log(Realpris) ~ BRA * Salgsår + Soverom + Boligtype + Eieform + Alder + I(Alder^2) + Fellesgjeld + Avstand_km, data = data_clean)

summary(model_interaksjon)

model_interaksjon |> as_flextable() |> 
  line_spacing(space = 0.3)
```

##### Deler opp i flere tidsperioder

```{r}
# Sjekk datatypen
str(data_clean$Salgsår)

# Hvis det er en faktor eller karakter, konverter til numerisk:
data_clean$Salgsår <- as.numeric(as.character(data_clean$Salgsår))

# Sjekk at det nå er numerisk
str(data_clean$Salgsår)

```

```{r}

# Filtrere data_clean for de tre periodene
data_2008_2013 <- data_clean %>% filter(Salgsår >= 2008 & Salgsår <= 2013)
data_2014_2019 <- data_clean %>% filter(Salgsår >= 2014 & Salgsår <= 2019)
data_2020_2024 <- data_clean %>% filter(Salgsår >= 2020 & Salgsår <= 2024)

# Sjekke antall observasjoner i hvert datasett
nrow(data_2008_2013)
nrow(data_2014_2019)
nrow(data_2020_2024)

```

```{r}
library(broom)

    model_2008_2013 <- lm(log(Realpris) ~ BRA + factor(Salgsår) + Soverom + factor(Eieform) + factor(Grunnkrets) + Alder + I(Alder^2) + Avstand_km + factor(Boligtype),  data = data_2008_2013)
    
    model_2014_2019 <- lm(log(Realpris) ~ BRA + factor(Salgsår) + Soverom + factor(Eieform) + factor(Grunnkrets) + Alder + I(Alder^2) + 
                           Avstand_km + factor(Boligtype),  data = data_2014_2019)
    
    model_2020_2024 <- lm(log(Realpris) ~ BRA + factor(Salgsår) + Soverom +  factor(Eieform) + factor(Grunnkrets) + Alder + I(Alder^2) + Avstand_km + factor(Boligtype),  data = data_2020_2024)
    
summary(model_2008_2013)
summary(model_2014_2019)
summary(model_2020_2024)
```

**Tolkning av hver periode**

**2008-2013: Tidlig periode med vekst**

-   Boligstørrelse (BRA): Signifikant og positiv effekt på boligpriser, med en koeffisient på 0.0027.
    Det betyr at en 1 m² økning i boligstørrelse øker prisen med omtrent 0.27 %.

-   Soverom: En ekstra soverom øker boligprisen med 5 %.

-   Alder og kvadrat av alder: Boliger mister verdi med alder, men aldringseffekten avtar for svært gamle boliger.

-   Eieform: Borettslagsboliger har 4.3 % lavere pris enn selveierboliger.

-   Boligtype: Eneboliger er 14.9 % dyrere enn leiligheter, rekkehus 4.99 % dyrere, og tomannsboliger 3.49 % dyrere.

-   Tidsfaktorer: Boligprisene økte betydelig i 2011, 2012 og 2013, særlig 2012 og 2013 med sterke positive effekter.

-   Lokale effekter: Flere grunnkretser hadde signifikant påvirkning, bl.a.
    Bleikemyr (-15.8%) og Dyrskar (-30.5%) som hadde negativ sammenheng, mens Hasseløy (+16.1%) og Ramsdalen (+30.4%) hadde høyere priser.

🔹 Oppsummering for perioden: Boligmarkedet viser økende priser mot slutten av perioden, med spesielt sterk vekst i 2012-2013.
Størrelse, soverom og eieform er viktige prisdrivere.

**2014-2019: Stagnering og svak nedgang**

-   Boligstørrelse (BRA): Fortsatt positiv effekt, men litt lavere koeffisient enn i forrige periode (0.00248).

-   Soverom: Sterkere effekt enn før (8.37 % prisøkning per ekstra soverom).

-   Alder og kvadrat av alder: Fortsatt en negativ effekt av alder, men aldringseffekten avtar gradvis.

-   Eieform: Borettslagsboliger har 7.25 % lavere pris enn selveierboliger (litt sterkere effekt enn i 2008-2013)

-   Boligtype: Eneboliger er nå 16.7 % dyrere enn leiligheter, rekkehus har økt i verdi (8.72 % høyere), mens tomannsboliger har en usikker effekt (ikke signifikant).

-   Tidsfaktorer: Prisene begynner å synke i 2018 og 2019, spesielt 2019 med en 5.75 % lavere pris enn 2014.

-   Lokale effekter: Mange grunnkretser har ikke signifikante effekter, men noen områder ser negative effekter (Hagland -39.5%).

-   🔹 Oppsummering for perioden: Markedet ser ut til å flate ut og priser synker i 2018-2019.
    Soverom blir viktigere, og borettslagsboliger faller relativt mer i pris.

**2020-2024: Pandemieffekter og boligprisvekst**

-   Boligstørrelse (BRA): Større effekt enn før, koeffisient 0.00304, noe som betyr at boligstørrelse nå forklarer mer av prisvariasjonen.

-   Soverom: Fortsatt viktig, men litt svakere effekt enn i 2014-2019 (7.45 % prisøkning).

-   Alder og kvadrat av alder: Fortsatt en sterk negativ sammenheng, med aldringseffekten avtagende.

-   Eieform: Borettslagsboliger har nå 9.73 % lavere pris enn selveierboliger (mer enn tidligere perioder).

-   Boligtype: Eneboliger er fortsatt dyrere (13.49 % høyere enn leiligheter), rekkehus har 8.77 % høyere pris, men tomannsboliger har nå ingen signifikant effekt.

-   Tidsfaktorer: 2020-2024 viser en tydelig prisvekst over årene, med særlig sterk vekst i 2023 og 2024 (9.16 % økning i 2024).

-   Lokale effekter: Flere grunnkretser får signifikante effekter.
    Mange områder som ikke hadde signifikante sammenhenger tidligere, har nå betydelig høyere priser.
    Sentrum 1 (+75.1%), Ramsdalen (+62.4%), og Maritime Skole (+50.8%) har blant de sterkeste positive effektene

🔹 Oppsummering for perioden: Boligprisene øker betydelig, spesielt etter 2022.
Boligstørrelse og beliggenhet får sterkere betydning, og forskjellene mellom boligtypene blir mindre.

![](images/clipboard-3390416210.png){width="457"}

![](images/clipboard-2496469599.png)

### Konfidensintervall for hver periode: tror dette er feil

```{r}
confint(model_2008_2013, level = 0.95)
confint(model_2014_2019, level = 0.95)
confint(model_2020_2024, level = 0.95)

```

Resultat:

![](images/clipboard-1659762222.png)

![](images/clipboard-1636149335.png)

##### ![](images/clipboard-2808522655.png)

![](images/clipboard-2118994738.png)

![](images/clipboard-3358252361.png)

![](images/clipboard-1231538328.png)

![](images/clipboard-1464190563.png)

![](images/clipboard-3822603310.png)

```{r}
# Lagre konfidensintervaller for hver periode
ci_2008_2013 <- as.data.frame(confint(model_2008_2013, level = 0.95))
ci_2014_2019 <- as.data.frame(confint(model_2014_2019, level = 0.95))
ci_2020_2024 <- as.data.frame(confint(model_2020_2024, level = 0.95))

# Legg til en kolonne med variabelnavn
ci_2008_2013$Variable <- rownames(ci_2008_2013)
ci_2014_2019$Variable <- rownames(ci_2014_2019)
ci_2020_2024$Variable <- rownames(ci_2020_2024)

# Slå sammen dataene basert på variabelnavn for å sikre at vi sammenligner samme koeffisienter
library(dplyr)

ci_table <- full_join(ci_2008_2013, ci_2014_2019, by = "Variable", suffix = c("_2008_2013", "_2014_2019"))
ci_table <- full_join(ci_table, ci_2020_2024, by = "Variable", suffix = c("", "_2020_2024"))

# Gi kolonnene mer forståelige navn
colnames(ci_table) <- c("Variable", "CI_2008_2013_Low", "CI_2008_2013_High",
                        "CI_2014_2019_Low", "CI_2014_2019_High",
                        "CI_2020_2024_Low", "CI_2020_2024_High")

# Vis tabellen
print(ci_table)

```

```{r}
# Sammenligne konfidensintervaller for BRA
ci_data <- data.frame(
  Period = c("2008-2013", "2014-2019", "2020-2024"),
  Low = c(ci_2008_2013["BRA", 1], ci_2014_2019["BRA", 1], ci_2020_2024["BRA", 1]),
  High = c(ci_2008_2013["BRA", 2], ci_2014_2019["BRA", 2], ci_2020_2024["BRA", 2])
)

print(ci_data)

```

2008-2019 overlapper og viser seg stabil, men 2020-2024 viker fra

```{r}
# Sammenligne konfidensintervaller for Soverom
ci_data <- data.frame(
  Period = c("2008-2013", "2014-2019", "2020-2024"),
  Low = c(ci_2008_2013["Soverom", 1], ci_2014_2019["Soverom", 1], ci_2020_2024["Soverom", 1]),
  High = c(ci_2008_2013["Soverom", 2], ci_2014_2019["Soverom", 2], ci_2020_2024["Soverom", 2])
)

print(ci_data)
```

Stor endring fra 2008-2019 ingen overlapp, liten overlapp fra 2014-2024, relativt stabil.
Soverom har ikke en stabil effekt over tid siden vi ser en signifikant økning i 2014-2019 og en liten nedgang etterpå.

```{r}
# Sammenligne konfidensintervaller for Alder
ci_data <- data.frame(
  Period = c("2008-2013", "2014-2019", "2020-2024"),
  Low = c(ci_2008_2013["Alder", 1], ci_2014_2019["Alder", 1], ci_2020_2024["Alder", 1]),
  High = c(ci_2008_2013["Alder", 2], ci_2014_2019["Alder", 2], ci_2020_2024["Alder", 2])
)

print(ci_data)
```

Ingen overlatt fra 2008-2019.
men overlapp fra 2014-2024.
Alder på boligen hadde en svakere negativ effekt før 2014, men fra 2014 og utover ble det en tydeligere reduksjon i verdi for eldre boliger.

Eieform:

```{r}
# Sammenligne konfidensintervaller for Eieform
ci_data_eieform <- data.frame(
  Period = c("2008-2013", "2014-2019", "2020-2024"),
  Low = c(ci_2008_2013["factor(Eieform)Borettslag", 1], 
          ci_2014_2019["factor(Eieform)Borettslag", 1], 
          ci_2020_2024["factor(Eieform)Borettslag", 1]),
  High = c(ci_2008_2013["factor(Eieform)Borettslag", 2], 
           ci_2014_2019["factor(Eieform)Borettslag", 2], 
           ci_2020_2024["factor(Eieform)Borettslag", 2])
)

print(ci_data_eieform)

```

### Leiligheter som egen regresjon, for hver periode

```{r}
# Log-transformert regresjon
#| label: tbl-logregleili
#| tbl-cap: Regresjonsmodell leiligheter
model_log_leil <- data_leilighet |> 
  mutate(
    Eieform = fct(as.character(Eieform)),
    Salgsår = fct(as.character(Salgsår)),
    Grunnkrets = fct(as.character(Grunnkrets))
  ) %>%
  lm(
    formula = log(Realpris) ~ BRA + Soverom + Alder + I(Alder^2) + har_fellesgjeld + Avstand_km + Eieform + Salgsår,
    data = .
    )

summary(model_log_leil)

model_log_leil |>  as_flextable() |> 
line_spacing(space = 0.3)
```

```{r}
# Filtrer ut kun leiligheter
leiligheter <- data_clean %>% filter(Boligtype == "Leilighet")

# Definer regresjonsmodellen (du kan justere den om nødvendig)
regresjonsformel <- Realpris ~ BRA + Soverom + factor(Salgsår) + factor(Eieform) + Alder + I(Alder^2) + Avstand_km

# Kjør regresjoner for hver periode
model_2008_2013 <- lm(regresjonsformel, data = leiligheter %>% filter(Salgsår >= 2008 & Salgsår <= 2013))
model_2014_2019 <- lm(regresjonsformel, data = leiligheter %>% filter(Salgsår >= 2014 & Salgsår <= 2019))
model_2020_2024 <- lm(regresjonsformel, data = leiligheter %>% filter(Salgsår >= 2020 & Salgsår <= 2024))

# Vis regresjonsresultater
summary(model_2008_2013)
summary(model_2014_2019)
summary(model_2020_2024)

# Konfidensintervaller for hver modell
confint(model_2008_2013, level = 0.95)
confint(model_2014_2019, level = 0.95)
confint(model_2020_2024, level = 0.95)

```

**Resultat:**

-   Størrelse (BRA) har en signifikant positiv effekt på boligprisen i alle perioder.
    Koeffisienten øker over tid, fra 13,250 NOK per m² (2008-2013) til 16,061 NOK per m² (2020-2024).
    Dette tyder på at markedet i økende grad verdsetter større leiligheter.

-   Antall soverom har også en positiv effekt på prisen, men effekten er betydelig sterkere i senere perioder.

    -   2008-2013: 40,090 NOK per soverom

    -   2014-2019: 121,900 NOK per soverom

    -   2020-2024: 109,011 NOK per soverom\

        Dette kan tyde på at etterspørselen etter større leiligheter har økt over tid.

-   Alder på boligen har en negativ effekt på pris, mens alder i kvadrat har en positiv effekt.
    Dette tyder på en U-formet sammenheng, der nybygg er dyrere, eldre boliger faller i verdi, men svært gamle boliger kan være attraktive igjen (f.eks. oppussede bygg med særpreg).

-   Årsdummier viser at leilighetsprisene steg spesielt i 2012-2013, holdt seg stabile i 2014-2019, og steg kraftig i 2020-2024.

    **2008-2013: Etter finanskrisen, stigende boligpriser**

    -   Størrelse (BRA) og antall soverom er viktige faktorer, men verdien av soverom er lavere enn i senere perioder.

    -   Boligpriser stiger mest fra 2012-2013, der 2013 har en signifikant økning på 151,400 NOK sammenlignet med 2008.

    -   Enkelte grunnkretser har signifikant lavere priser enn referanseområdet.
        For eksempel er Bleikemyr (-516,600 NOK) og Skåredalen (-402,800 NOK) assosiert med lavere boligpriser, mens Fjellstemmen Øst (+656,200 NOK) og Haugetunet (+776,000 NOK) har høyere priser.

**2014-2019: Stabilisering etter boligprisvekst**

-   Prisene holder seg relativt stabile sammenlignet med 2008-2013.

-   Ingen signifikante prisendringer fra år til år (unntatt en svak nedgang i 2019).

-   Antall soverom får sterkere effekt på boligpriser, med en økning til 121,900 NOK per soverom.

-   Flere grunnkretser får signifikant lavere boligpriser, spesielt Kyvikdalen (-2,713,000 NOK) og Sentrum 10 (-528,400 NOK).

-   Haugetunet (-467,200 NOK) og Hemmingstad (-460,500 NOK) ser også en signifikant prisnedgang.

**2020-2024: Pandemi og boligprisboom**

-   Sterk prisvekst i 2023-2024, med en signifikant økning på 163,688 NOK i 2024 sammenlignet med 2020.

-   BRA og soverom har fortsatt sterk effekt, med 16,061 NOK per m² og 109,011 NOK per soverom.

-   Grunnkretser med høyest boligpriser:

    -   Sentrum 1 (+1,034,000 NOK)

    -   Ramsdalen (+596,100 NOK)

    -   Skeisvannsblokkene (+313,500 NOK)

-   Grunnkretser med lavere boligpriser:

    -   Kyvikdalen (-1,301,000 NOK)

    -   Solvang (-554,000 NOK)

    -   Sentrum 10 (-475,900 NOK)

    -   Udland (-549,500 NOK)

    **Hvordan kan du bruke dette i oppgaven?**

    1.  **Diskuter utviklingen i boligmarkedet i Haugesund for leiligheter**

        -   Hvilke faktorer driver prisene?
            Hvordan har dette endret seg over tid?

        -   Størrelse og antall soverom har blitt viktigere.

        -   Boligprisene steg mest i 2012-2013 og igjen i 2020-2024.

        **Knytt dette opp mot boliglånsforskriften**

        -   Har strammere lånekrav påvirket prisene i noen perioder?

        -   For eksempel: Stagnasjonen i 2014-2019 kan være knyttet til innstramminger i **2015-forskriften**.

        **Analyser forskjeller mellom områder**

        -   Noen grunnkretser har systematisk lavere priser (f.eks. Bleikemyr, Kyvikdalen), mens andre har høyere (Sentrum 1, Ramsdalen, Skeisvannsblokkene).

        -   Hvordan kan dette forklares?
            Beliggenhet?
            Attraktivitet?
            Infrastruktur?

        **Fremhev pandemiens effekt**

        -   Prisveksten i 2020-2024 kan delvis forklares av **lav rente under pandemien**, høy etterspørsel og færre tilgjengelige boliger.

![](images/clipboard-611890696.png)

### Log regresjon med Realpris som avhengig og avstand_km som forklaring

```{r}
model_avstand <- lm(log(Realpris) ~ Avstand_km + BRA + Soverom + Byggeår + 
                     factor(Boligtype) + factor(Eieform) + factor(Grunnkrets) + Alder + I(Alder^2) + Fellesgjeld, 
                     data = data_clean)

summary(model_avstand)
```

resultat:

Effekten er **ikke statistisk signifikant** (p-verdi = 0.1514 \> 0.05), så vi **kan ikke konkludere med at avstand systematisk påvirker boligprisene i Haugesund.**

```{r}
model_leilighet <- lm(log(Realpris) ~ Avstand_km + BRA + Soverom + Byggeår + 
                       factor(Eieform) + factor(Grunnkrets) + Alder + I(Alder^2) + Fellesgjeld, 
                       data = subset(data_clean, Boligtype == "Leilighet"))

model_enebolig <- lm(log(Realpris) ~ Avstand_km + BRA + Soverom + Byggeår + 
                      factor(Eieform) + factor(Grunnkrets) + Alder + I(Alder^2) + Fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Enebolig"))

model_rekkehus <- lm(log(Realpris) ~ Avstand_km + BRA + Soverom + Byggeår + 
                      factor(Eieform) + factor(Grunnkrets) + Alder + I(Alder^2) + Fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Rekkehus"))

model_tomanns <- lm(log(Realpris) ~ Avstand_km + BRA + Soverom + Byggeår + 
                      factor(Eieform) + factor(Grunnkrets) + Alder + I(Alder^2) + Fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Tomannsbolig"))

# Vise resultater
library(modelsummary)
modelsummary(list(Leilighet = model_leilighet, Enebolig = model_enebolig, 
                  Rekkehus = model_rekkehus, Tomannsbolig = model_tomanns),
             output = "flextable")

```

Resultat:

For leiligheter og eneboliger er effekten av avstand til sentrum negativ, noe som betyr at prisene synker med økende avstand.

For rekkehus ser det derimot ut til å være en positiv sammenheng, noe som kan indikere at rekkehus nær sentrum er relativt billigere enn de som ligger lengre unna.

For tomannsboliger er effekten nær null, noe som kan tyde på at avstand til sentrum ikke spiller en stor rolle for denne boligtypen.

Sammenhengen er sterkest for leiligheter, der en økning i avstand til sentrum gir en tydelig prisreduksjon.
Gjeldene for førstegangskjøpere

```{r}
model_avstand_tid <- lm(log(Realpris) ~ Avstand_km * factor(Salgsår) + BRA + Soverom + Byggeår + 
                         factor(Boligtype) + factor(Eieform) + factor(Grunnkrets) + Alder + I(Alder^2) + Fellesgjeld, 
                         data = data_clean)

summary(model_avstand_tid)

```

Har effekten endret seg gjennom årene, 2008-2024?
JA

-   Før 2016: Ingen signifikante effekter av avstand til sentrum.

-   **2016-2019:** Noen svakere positive sammenhenger begynner å dukke opp.
    For 2016 og 2017 er effekten signifikant på 5 % nivå.

-   **2020-2024:** Effekten av avstand blir gradvis sterkere, spesielt fra 2022 til 2024, der sammenhengen er signifikant og positiv.

<!-- -->

-   **Tidligere (før 2016):** Avstand til sentrum hadde liten eller ingen effekt på boligprisene.

-   **Fra 2016 og utover:** Vi ser en økende positiv effekt, noe som betyr at boligprisene utenfor sentrum har steget mer relativt til sentrum.

-   **Sterkest effekt etter 2020:** Dette kan indikere at pandemien, fjernarbeid eller økt boligetterspørsel i forsteder har gjort avstand til sentrum mindre viktig i nyere år.

-   Vi ser at årene med sterkest signifikante sammenhenger (2020-2024) faller sammen med en periode med høy prisvekst nasjonalt.

<!-- -->

-   Dette kan bety at høy boligprisvekst har ført til at områder utenfor sentrum har blitt relativt mer attraktive.

### Robust analyse

```{r}
#| label: tbl-robustleil
#| tbl-cap: Modell resultater for robust.
library(flextable)
data_leilighet <- subset(data_clean, Boligtype == "Leilighet") |> 
  mutate(
    Salgsår = fct(as.character(Salgsår)),
    Eieform = fct(as.character(Eieform)),
    Grunnkrets = fct(as.character(Grunnkrets))
  )

model_leilighet <- lm(
  log(Realpris) ~ BRA * Salgsår + Soverom  + Eieform +  Alder + I(Alder^2) + Fellesgjeld + Avstand_km, data = data_leilighet)

model_leilighet |> as_flextable() |> 
  line_spacing(space = 0.3)


```

Som vi ser av @tbl-robustleil ....

```{r}
#| label: tbl-robustenebolig
#| tbl-cap: Modell resultater for robust.
library(flextable)
data_enebolig <- subset(data_clean, Boligtype == "Enebolig") |> 
  mutate(
    Salgsår = fct(as.character(Salgsår)),
    Eieform = fct(as.character(Eieform)),
    Grunnkrets = fct(as.character(Grunnkrets))
  )

model_enebolig <- lm(
  log(Realpris) ~ BRA * Salgsår + Soverom  + Eieform +  Alder + I(Alder^2) + Fellesgjeld + Avstand_km, data = data_enebolig)

model_enebolig |> as_flextable() |> 
  line_spacing(space = 0.3)

```

```{r}
#| label: tbl-robustrekkehus
#| tbl-cap: Modell resultater for robust.
library(flextable)
data_rekkehus <- subset(data_clean, Boligtype == "Rekkehus") |> 
  mutate(
    Salgsår = fct(as.character(Salgsår)),
    Eieform = fct(as.character(Eieform)),
    Grunnkrets = fct(as.character(Grunnkrets))
  )

model_rekkehus <- lm(
  log(Realpris) ~ BRA * Salgsår + Soverom  + Eieform +  Alder + I(Alder^2) + Fellesgjeld + Avstand_km, data = data_rekkehus)

model_rekkehus |> as_flextable() |> 
  line_spacing(space = 0.3)

```

```{r}
#| label: tbl-robusttomannsbolig
#| tbl-cap: Modell resultater for robust.
library(flextable)
data_tomanns <- subset(data_clean, Boligtype == "Tomannsbolig") |> 
  mutate(
    Salgsår = fct(as.character(Salgsår)),
    Eieform = fct(as.character(Eieform)),
    Grunnkrets = fct(as.character(Grunnkrets))
  )

model_tomanns <- lm(
  log(Realpris) ~ BRA * Salgsår + Soverom  + Eieform +  Alder + I(Alder^2) + Fellesgjeld + Avstand_km, data = data_tomanns)

model_tomanns |> as_flextable() |> 
  line_spacing(space = 0.3)

```

```{r}
# Modell for leiligheter
model_leilighet <- lm(log(Realpris) ~ BRA + Soverom + Eieform + Alder + factor(Salgsår) + Fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Leilighet"))

# Modell for eneboliger
model_enebolig <- lm(log(Realpris) ~ BRA + Soverom + Eieform + Alder + factor(Salgsår) + Fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Enebolig"))

# Modell for rekkehus
model_rekkehus <- lm(log(Realpris) ~ BRA + Soverom + Eieform + Alder + factor(Salgsår) + Fellesgjeld, 
                      data = subset(data_clean, Boligtype == "Rekkehus"))

model_tomannsbolig <- lm(log(Realpris) ~ BRA + Soverom + Eieform + Alder + factor(Salgsår) + 
Fellesgjeld, 
                         data = subset(data_clean, Boligtype == "Tomannsbolig"))

# Se resultatene
summary(model_leilighet)
summary(model_enebolig)
summary(model_rekkehus)
summary(model_tomannsbolig)
```

```{r}
models <- list(
  "Leilighet" = model_leilighet,
  "Enebolig" = model_enebolig,
  "Rekkehus" = model_rekkehus,
  "Tomannsbolig" = model_tomannsbolig
)

```

```{r}
# Last inn nødvendig pakke
library(flextable)

# Lag en tabell med modelsummary og konverter til flextable
table_flex <- modelsummary(models, output = "flextable")

# Tilpass utseendet hvis ønskelig
table_flex <- table_flex %>%
  autofit() %>% 
  theme_booktabs()

# Vis tabellen
table_flex

```

```{r}
# Liste over boligtyper
boligtyper <- unique(data_clean$Boligtype)  

# Opprett en liste for lagring av tabeller
ci_lister <- list()

for (bt in boligtyper) {
  # Filtrer data for hver boligtype
  subset_data <- subset(data_clean, Boligtype == bt)
  
  # Kjør regresjonsmodell for den aktuelle boligtypen
  model_bt <- lm(log(Realpris) ~ BRA + Soverom + Byggeår + Eieform + factor(Salgsår), 
                 data = subset_data)

  # Lag konfidensintervall-tabell
  ci_table <- as.data.frame(confint(model_bt, level = 0.95))
  colnames(ci_table) <- c("Nedre grense", "Øvre grense")  
  ci_table$Variabel <- rownames(confint(model_bt, level = 0.95))  
  ci_table <- ci_table[, c("Variabel", "Nedre grense", "Øvre grense")]  

  # Lag en flextable og lagre i listen
  ci_lister[[bt]] <- flextable(ci_table) |>
    theme_vanilla() |>
    set_table_properties(layout = "autofit") |>
    set_caption(paste("Konfidensintervaller for", bt))
}

# For å vise tabellen for en spesifikk boligtype, f.eks. "Leilighet":
ci_lister[["Leilighet"]]
```

```{r}
# Liste over boligtyper
boligtyper <- unique(data_clean$Boligtype)  

# Opprett en liste for lagring av tabeller
ci_lister <- list()

for (bt in boligtyper) {
  # Filtrer data for hver boligtype
  subset_data <- subset(data_clean, Boligtype == bt)
  
  # Kjør regresjonsmodell for den aktuelle boligtypen
  model_bt <- lm(log(Realpris) ~ BRA + Soverom + Byggeår + Eieform + factor(Salgsår), 
                 data = subset_data)

  # Lag konfidensintervall-tabell
  ci_table <- as.data.frame(confint(model_bt, level = 0.95))
  colnames(ci_table) <- c("Nedre grense", "Øvre grense")  
  ci_table$Variabel <- rownames(confint(model_bt, level = 0.95))  
  ci_table <- ci_table[, c("Variabel", "Nedre grense", "Øvre grense")]  

  # Lag en flextable og lagre i listen
  ci_lister[[bt]] <- flextable(ci_table) |>
    theme_vanilla() |>
    set_table_properties(layout = "autofit") |>
    set_caption(paste("Konfidensintervaller for", bt))
}

# For å vise tabellen for en spesifikk boligtype, f.eks. "Leilighet":
ci_lister[["Enebolig"]]

```

```{r}
# Liste over boligtyper
boligtyper <- unique(data_clean$Boligtype)  

# Opprett en liste for lagring av tabeller
ci_lister <- list()

for (bt in boligtyper) {
  # Filtrer data for hver boligtype
  subset_data <- subset(data_clean, Boligtype == bt)
  
  # Kjør regresjonsmodell for den aktuelle boligtypen
  model_bt <- lm(log(Realpris) ~ BRA + Soverom + Byggeår + Eieform + factor(Salgsår), 
                 data = subset_data)

  # Lag konfidensintervall-tabell
  ci_table <- as.data.frame(confint(model_bt, level = 0.95))
  colnames(ci_table) <- c("Nedre grense", "Øvre grense")  
  ci_table$Variabel <- rownames(confint(model_bt, level = 0.95))  
  ci_table <- ci_table[, c("Variabel", "Nedre grense", "Øvre grense")]  

  # Lag en flextable og lagre i listen
  ci_lister[[bt]] <- flextable(ci_table) |>
    theme_vanilla() |>
    set_table_properties(layout = "autofit") |>
    set_caption(paste("Konfidensintervaller for", bt))
}

# For å vise tabellen for en spesifikk boligtype, f.eks. "Leilighet":
ci_lister[["Rekkehus"]]

```

```{r}
# Liste over boligtyper
boligtyper <- unique(data_clean$Boligtype)  

# Opprett en liste for lagring av tabeller
ci_lister <- list()

for (bt in boligtyper) {
  # Filtrer data for hver boligtype
  subset_data <- subset(data_clean, Boligtype == bt)
  
  # Kjør regresjonsmodell for den aktuelle boligtypen
  model_bt <- lm(log(Realpris) ~ BRA + Soverom + Byggeår + Eieform + factor(Salgsår), 
                 data = subset_data)

  # Lag konfidensintervall-tabell
  ci_table <- as.data.frame(confint(model_bt, level = 0.95))
  colnames(ci_table) <- c("Nedre grense", "Øvre grense")  
  ci_table$Variabel <- rownames(confint(model_bt, level = 0.95))  
  ci_table <- ci_table[, c("Variabel", "Nedre grense", "Øvre grense")]  

  # Lag en flextable og lagre i listen
  ci_lister[[bt]] <- flextable(ci_table) |>
    theme_vanilla() |>
    set_table_properties(layout = "autofit") |>
    set_caption(paste("Konfidensintervaller for", bt))
}

# For å vise tabellen for en spesifikk boligtype, f.eks. "Leilighet":
ci_lister[["Tomannsbolig"]]

```

### Ser på Avstand_km

Vanlig log: alt er likt utenom at grunnkrets er ekslkludert

```{r}
# Log-transformert regresjon
#| label: tbl-logreg2
#| tbl-cap: Regresjonsmodell uten grunnkretser
model_log2 <- data_clean |> 
  mutate(
    Boligtype = fct(as.character(Boligtype)),
    Eieform = fct(as.character(Eieform)),
    Salgsår = fct(as.character(Salgsår)),
  ) %>%
  lm(
    formula = log(Realpris) ~ BRA + Soverom + Alder + I(Alder^2) + Fellesgjeld + Avstand_km + Boligtype + Eieform + Salgsår,
    data = .
    )

summary(model_log2)

model_log2 |>  as_flextable() |> 
line_spacing(space = 0.3)
```

Resultat: Når avstanden til sentrum øker med **1 km**, reduseres den log-transformerte realprisen med **3.44 %**.
Siden modellen er log-lineær, betyr dette at **boligprisen faller med ca. 3.44 % per km lengre unna sentrum** (ceteris paribus).
Dette viser at avstand til sentrum er en viktig forklaringsvariabel for boligpriser.

### Regresjon kun med leiligheter og uten grunnkrets:

```{r}
# Log-transformert regresjon
#| label: tbl-logregleil
#| tbl-cap: Regresjonsmodell med leiligheter
model_leilighet1 <- data_leilighet |> 
  mutate(
    Eieform = fct(as.character(Eieform)),
    Salgsår = fct(as.character(Salgsår)),
  ) %>%
  lm(
    formula = log(Realpris) ~ BRA + Soverom + Alder + I(Alder^2) + Fellesgjeld + Avstand_km + Eieform + Salgsår,data = .
    )

summary(model_leilighet1)

model_leilighet1 |>  as_flextable() |> 
line_spacing(space = 0.3)
```

resultat:![](images/clipboard-1695461193.png)

![](images/clipboard-1048695332.png)

### Predikere priser

Alle boliger, 2008-2024

```{r}
# Filtrer datasetet for alle boligtyper (fjerner prisgrensen)
boliger_uten_prisgrense <- data_clean %>%
  select(Realpris, BRA, Boligtype, Soverom, Alder, Eieform, Fellesgjeld, Avstand_km)

# Vis gjennomsnittlige verdier for relevante variabler
summary(boliger_uten_prisgrense)
```

```{r}
# Sett inn koeffisientene fra din modell
intercept <- 14.27  # Intercept fra modellen
beta_BRA <- 0.002906  # Koeffisient for BRA
beta_Soverom <- 0.06804  # Koeffisient for soverom
beta_Alder <- -0.01045  # Koeffisient for alder
beta_Alder2 <- 0.00004478  # Koeffisient for alder^2
beta_Avstand <- -0.03438  # Koeffisient for avstand til sentrum
beta_Fellesgjeld <- 0.0000001265  # Koeffisient for fellesgjeld
beta_Eieform <- -0.1171  # Effekt av borettslag
beta_Enebolig <- 0.1021  # Effekt av enebolig
beta_Rekkehus <- 0.03643  # Effekt av rekkehus
beta_Tomannsbolig <- -0.02004  # Effekt av tomannsbolig

# Sett inn gjennomsnittsverdier fra hele datasettet (ingen prisgrense)
BRA <- 127  # Gjennomsnittlig BRA for alle boligtyper
Soverom <- 2.751  # Gjennomsnittlig antall soverom
Alder <- 43.05  # Gjennomsnittlig alder
Alder2 <- Alder^2
Avstand_km <- 2.634  # Gjennomsnittlig avstand til sentrum
Fellesgjeld <- 75408  # Gjennomsnittlig fellesgjeld (kun for borettslag)

# Beregn log-pris for hver boligtype
log_pris_leilighet <- intercept +
  beta_BRA * BRA +
  beta_Soverom * Soverom +
  beta_Alder * Alder +
  beta_Alder2 * Alder2 +
  beta_Avstand * Avstand_km

log_pris_enebolig <- log_pris_leilighet + beta_Enebolig
log_pris_rekkehus <- log_pris_leilighet + beta_Rekkehus
log_pris_tomannsbolig <- log_pris_leilighet + beta_Tomannsbolig

# Borettslag-justering (kun for leiligheter)
log_pris_borettslag <- log_pris_leilighet + beta_Eieform + beta_Fellesgjeld * Fellesgjeld

# Konverter log-priser til faktisk pris
pred_pris_leilighet <- exp(log_pris_leilighet)
pred_pris_enebolig <- exp(log_pris_enebolig)
pred_pris_rekkehus <- exp(log_pris_rekkehus)
pred_pris_tomannsbolig <- exp(log_pris_tomannsbolig)
pred_pris_borettslag <- exp(log_pris_borettslag)

# Print resultater
cat("Predikert pris for leilighet (selveier):", round(pred_pris_leilighet), "NOK\n")
cat("Predikert pris for leilighet (borettslag):", round(pred_pris_borettslag), "NOK\n")
cat("Predikert pris for enebolig:", round(pred_pris_enebolig), "NOK\n")
cat("Predikert pris for rekkehus:", round(pred_pris_rekkehus), "NOK\n")
cat("Predikert pris for tomannsbolig:", round(pred_pris_tomannsbolig), "NOK\n")

```

Kun leilighet i 2020:

```{r}
# Sett inn koeffisientene fra din modell
intercept <- 14.27  # Intercept fra modellen
beta_BRA <- 0.002906  # Koeffisient for BRA
beta_Soverom <- 0.06804  # Koeffisient for soverom
beta_Alder <- -0.01045  # Koeffisient for alder
beta_Alder2 <- 0.00004478  # Koeffisient for alder^2
beta_Avstand <- -0.03438  # Koeffisient for avstand til sentrum
beta_Fellesgjeld <- 0.0000001265  # Koeffisient for fellesgjeld
beta_Eieform <- -0.1171  # Effekt av borettslag
beta_Salgsår_2020 <- 0.07405  # Effekt av salgsår 2020

# Sett inn gjennomsnittsverdier for leiligheter i 2020
BRA <- 83  # Gjennomsnittlig BRA for leiligheter i 2020
Soverom <- 2  # Gjennomsnittlig antall soverom for leiligheter i 2020
Alder <- 47  # Gjennomsnittlig alder på boligen i 2020
Alder2 <- Alder^2  # Alder i kvadrat
Avstand_km <- 2.25  # Gjennomsnittlig avstand til sentrum
Fellesgjeld <- 82044  # Gjennomsnittlig fellesgjeld

# Beregn log-pris for leilighet (selveier) i 2020
log_pris_leilighet_2020 <- intercept +
  beta_BRA * BRA +
  beta_Soverom * Soverom +
  beta_Alder * Alder +
  beta_Alder2 * Alder2 +
  beta_Avstand * Avstand_km +
  beta_Salgsår_2020  # Inkluderer effekten av salgsår 2020

# Beregn log-pris for leilighet (borettslag) i 2020
log_pris_borettslag_2020 <- log_pris_leilighet_2020 + beta_Eieform + beta_Fellesgjeld * Fellesgjeld

# Konverter log-priser til faktisk pris
pred_pris_leilighet_2020 <- exp(log_pris_leilighet_2020)
pred_pris_borettslag_2020 <- exp(log_pris_borettslag_2020)

# Print resultater
cat("Predikert pris for leilighet (selveier) i 2020:", round(pred_pris_leilighet_2020), "NOK\n")
cat("Predikert pris for leilighet (borettslag) i 2020:", round(pred_pris_borettslag_2020), "NOK\n")

```

Kun leilighet i 2024:

```{r}
# Sett inn koeffisientene fra din modell
intercept <- 14.27  # Intercept fra modellen
beta_BRA <- 0.002906  # Koeffisient for BRA
beta_Soverom <- 0.06804  # Koeffisient for soverom
beta_Alder <- -0.01045  # Koeffisient for alder
beta_Alder2 <- 0.00004478  # Koeffisient for alder^2
beta_Avstand <- -0.03438  # Koeffisient for avstand til sentrum
beta_Fellesgjeld <- 0.0000001265  # Koeffisient for fellesgjeld
beta_Eieform <- -0.1171  # Effekt av borettslag
beta_Salgsår_2024 <- 0.162  # Effekt av salgsår 2024

# Sett inn gjennomsnittsverdier fra ditt datasett for leiligheter i 2024
BRA <- 83  # Gjennomsnittlig BRA for leiligheter i 2024
Soverom <- 2  # Gjennomsnittlig antall soverom for leiligheter i 2024
Alder <- 47  # Gjennomsnittlig alder på boligen i 2024
Alder2 <- Alder^2  # Alder i kvadrat
Avstand_km <- 2.25  # Gjennomsnittlig avstand til sentrum
Fellesgjeld <- 82044  # Gjennomsnittlig fellesgjeld

# Beregn log-pris for leilighet (selveier) i 2024
log_pris_leilighet_2024 <- intercept +
  beta_BRA * BRA +
  beta_Soverom * Soverom +
  beta_Alder * Alder +
  beta_Alder2 * Alder2 +
  beta_Avstand * Avstand_km +
  beta_Salgsår_2024  # Inkluderer effekten av salgsår 2024

# Beregn log-pris for leilighet (borettslag) i 2024
log_pris_borettslag_2024 <- log_pris_leilighet_2024 + beta_Eieform + beta_Fellesgjeld * Fellesgjeld

# Konverter log-priser til faktisk pris
pred_pris_leilighet_2024 <- exp(log_pris_leilighet_2024)
pred_pris_borettslag_2024 <- exp(log_pris_borettslag_2024)

# Print resultater
cat("Predikert pris for leilighet (selveier) i 2024:", round(pred_pris_leilighet_2024), "NOK\n")
cat("Predikert pris for leilighet (borettslag) i 2024:", round(pred_pris_borettslag_2024), "NOK\n")


```

```{r}
# Filtrer datasetet for leiligheter og grupper etter eieform
leilighet_stats <- data %>%
  filter(Boligtype == "Leilighet") %>%
  group_by(Eieform) %>%
  summarise(
    Gjennomsnittspris = mean(Realpris, na.rm = TRUE),
    Medianpris = median(Realpris, na.rm = TRUE),
    Minpris = min(Realpris, na.rm = TRUE),
    Makspris = max(Realpris, na.rm = TRUE),
    Antall = n()  # Valgfritt: Antall observasjoner per kategori
  )

# Lag en pen tabell med flextable
leilighet_tabell <- flextable(leilighet_stats) %>%
  set_header_labels(
    Eieform = "Eieform",
    Gjennomsnittspris = "Gjennomsnittspris",
    Medianpris = "Medianpris",
    Minpris = "Minste pris",
    Makspris = "Høyeste pris",
    Antall = "Antall boliger"
  ) %>%
  colformat_num(j = c("Gjennomsnittspris", "Medianpris", "Minpris", "Makspris"), big.mark = " ", digits = 0) %>% 
  autofit()

# Vis tabellen
leilighet_tabell


```

```{r}
# Filtrer datasetet for leiligheter i 2020 og 2024
leiligheter_2020_2024 <- data_clean %>%
  filter(Boligtype == "Leilighet" & Salgsår %in% c(2020, 2024))

# Beregn gjennomsnitt og medianpris for selveier og borettslag i 2020 og 2024
pris_statistikk <- leiligheter_2020_2024 %>%
  group_by(Eieform, Salgsår) %>%
  summarise(
    Gjennomsnittspris = mean(Realpris, na.rm = TRUE),
    Medianpris = median(Realpris, na.rm = TRUE),
    Minste_pris = min(Realpris, na.rm = TRUE),
    Høyeste_pris = max(Realpris, na.rm = TRUE),
    Antall_boliger = n()
  )

# Vis resultatene i en fin tabell
pris_statistikk %>%
  kable(digits = 0, format = "html", caption = "Prisstatistikk for Leiligheter (2020 & 2024)") %>%
  kable_styling(full_width = FALSE, bootstrap_options = c("striped", "hover"))

```

**annen måte å predikere priser: OBS alle boligtyper**

```{r}
# Funksjon for å predikere for én boligtype
prediker_boligtype <- function(data, boligtype_navn) {
  data_bolig <- data %>%
    filter(Boligtype == boligtype_navn)

  prediksjoner <- predict(model_fit, new_data = data_bolig)

  data_bolig <- data_bolig %>%
    mutate(Predikert_logpris = prediksjoner$.pred) %>%
    mutate(Predikert_Pris = exp(Predikert_logpris))

  return(data_bolig)
}

```

```{r}
data_clean$Salgsår <- as.numeric(as.character(data_clean$Salgsår))

# Liste over boligtypene du har i datasettet
boligtyper <- c("Leilighet", "Enebolig", "Rekkehus", "Tomannsbolig")

# Bruk funksjonen for å lage ett datasett med prediksjoner for alle
data_predikert <- lapply(boligtyper, function(bt) prediker_boligtype(data_clean, bt)) %>%
  bind_rows()

```

```{r}
library(dplyr)
library(flextable)

summary_stats <- data_predikert %>%
  group_by(Boligtype) %>%
  summarise(
    Gjennomsnitt_Predikert = mean(Predikert_Pris, na.rm = TRUE),
    Gjennomsnitt_Faktisk = mean(Realpris, na.rm = TRUE),
    Median_Predikert = median(Predikert_Pris, na.rm = TRUE),
    Median_Faktisk = median(Realpris, na.rm = TRUE)
  )

# Lag en flextable
tbl_summary <- summary_stats %>%
  flextable() %>%
  colformat_num(j = c("Gjennomsnitt_Predikert", "Gjennomsnitt_Faktisk", 
                      "Median_Predikert", "Median_Faktisk"), digits = 0, big.mark = " ") %>%
  set_caption("Sammenligning av predikert og faktisk boligpris per boligtype") %>%
  autofit()

tbl_summary

```

**Kun leiligheter:**

```{r}
data_leilighet <- subset(data_clean, Boligtype == "Leilighet")

# Lag en ny variabel med log-transformert pris (kun for trening)
data_leilighet <- data_leilighet %>%
  mutate(LogRealpris = log(Realpris))

# Sett opp recipe uten step_log() for Realpris
recipe_spec <- recipe(LogRealpris ~ BRA + Soverom + Eieform + Alder + Fellesgjeld + Avstand_km + Salgsår, 
                      data = data_leilighet) %>%
  step_mutate(Salgsår = as.factor(Salgsår)) %>%  # Gjør salgsår til faktor
  step_mutate(Eieform = as.factor(Eieform)) %>%
  step_poly(Alder, degree = 2)  # Alder^2

# Sett opp modellen
model_spec <- linear_reg() %>%
  set_engine("lm")

# Sett opp workflow
workflow_spec <- workflow() %>%
  add_recipe(recipe_spec) %>%
  add_model(model_spec)

# Tren modellen
model_fit <- workflow_spec %>%
  fit(data = data_leilighet)

# **Lag testdatasett uten LogRealpris**
new_data <- data_leilighet %>%
  select(-LogRealpris)  # Fjerner LogRealpris fordi vi ikke har det i nye observasjoner

# Prediker priser
prediksjoner <- predict(model_fit, new_data = new_data) %>%
  bind_cols(new_data) %>%
  mutate(Predikert_Pris = exp(.pred))  # Konverter tilbake fra log-verdi

# Vis resultatene
print(prediksjoner)

```

Predikere boligpriser

```{r}
prediksjoner <- predict(model_fit, new_data = data_leilighet)

data_leilighet <- data_leilighet %>%
  mutate(Predikert_logpris = prediksjoner$.pred)

data_leilighet <- data_leilighet %>%
  mutate(Predikert_Pris = exp(Predikert_logpris))

```

sammenlikne med faktiske priser

```{r}
# Sammenlign gjennomsnittlig predikert pris vs faktisk pris
summary_stats <- data_leilighet %>%
  summarise(
    Gjennomsnitt_Predikert = mean(Predikert_Pris, na.rm = TRUE),
    Gjennomsnitt_Faktisk = mean(Realpris, na.rm = TRUE),
    Median_Predikert = median(Predikert_Pris, na.rm = TRUE),
    Median_Faktisk = median(Realpris, na.rm = TRUE)
  )

# Konverter til flextable
tbl_summary <- summary_stats %>%
  flextable() %>%
  colformat_num(j = c("Gjennomsnitt_Predikert", "Gjennomsnitt_Faktisk", 
                      "Median_Predikert", "Median_Faktisk"), digits = 2, big.mark = " ") %>%
  set_caption("Sammenligning av predikert og faktisk boligpris") %>%
  autofit()

# Vis tabellen
tbl_summary

```

```{r}
data_leilighet <- subset(data_clean, Boligtype == "Leilighet")

```

```{r}
# Sammenlign gjennomsnittlig predikert pris vs faktisk pris for selveier og borettslag
summary_stats <- data_leilighet %>%
  group_by(Eieform) %>%  # 👈 Gruppér etter Eieform!
  summarise(
    Gjennomsnitt_Predikert = mean(Predikert_Pris, na.rm = TRUE),
    Gjennomsnitt_Faktisk = mean(Realpris, na.rm = TRUE),
    Median_Predikert = median(Predikert_Pris, na.rm = TRUE),
    Median_Faktisk = median(Realpris, na.rm = TRUE)
  )

# Konverter til flextable
tbl_summary <- summary_stats %>%
  flextable() %>%
  colformat_num(
    j = c("Gjennomsnitt_Predikert", "Gjennomsnitt_Faktisk", 
          "Median_Predikert", "Median_Faktisk"),
    digits = 0,
    big.mark = " "
  ) %>%
  set_caption("Sammenligning av predikert og faktisk boligpris for selveier og borettslag") %>%
  autofit()

# Vis tabellen
tbl_summary

```

Skiller mellom 1 soverom og 2 på leiligheter

```{r}
library(dplyr)

# Funksjon som lager testdata og predikerer pris
prediker_leilighet_sov <- function(eieform_navn) {
  ny_data <- tibble(
    BRA = mean(data_clean$BRA, na.rm = TRUE),
    Soverom = c(1, 2),
    Alder = mean(data_clean$Alder, na.rm = TRUE),
    Avstand_km = mean(data_clean$Avstand_km, na.rm = TRUE),
    har_fellesgjeld = 0,
    Fellesgjeld = 0,
    Boligtype = "Leilighet",
    Eieform = eieform_navn,
    Salgsår = 2020
  )

  ny_data$`I(Alder^2)` <- ny_data$Alder^2

  pred <- predict(model_fit, new_data = ny_data)
  ny_data$Pris_pred <- as.numeric(exp(pred$.pred))

  return(ny_data %>% select(Eieform, Soverom, Pris_pred))
}

# Kjør for både Selveier og Borettslag
pred_selveier <- prediker_leilighet_sov("Selveier")
pred_borettslag <- prediker_leilighet_sov("Borettslag")

# Kombiner resultatene
pred_resultat <- bind_rows(pred_selveier, pred_borettslag)

# Vis som flextable
library(flextable)

pred_resultat %>%
  flextable() %>%
  colformat_num(j = "Pris_pred", digits = 0, big.mark = " ") %>%
  set_caption("Predikert boligpris for leiligheter med 1 og 2 soverom, alt annet likt") %>%
  autofit()

```

```{r}
library(dplyr)

# Filtrer faktiske leiligheter (med Salgsår 2020 for konsistens, hvis ønsket)
faktiske_leiligheter <- data_clean %>%
  filter(Boligtype == "Leilighet", Soverom %in% c(1, 2)) %>%
  group_by(Eieform, Soverom) %>%
  summarise(Faktisk_Pris = mean(Realpris, na.rm = TRUE), .groups = "drop")

# Kombiner med predikert
sammenligning <- pred_resultat %>%
  left_join(faktiske_leiligheter, by = c("Eieform", "Soverom"))

# Vis med flextable
library(flextable)

sammenligning %>%
  flextable() %>%
  colformat_num(j = c("Pris_pred", "Faktisk_Pris"), digits = 0, big.mark = " ") %>%
  set_caption("Sammenligning av predikert og faktisk pris for leiligheter med 1 og 2 soverom") %>%
  autofit()

```

### Konfidensintervall igjen

```{r}
# Konverter til dataframes for å matche variabelnavn
ci_2008_2013_df <- as.data.frame(ci_2008_2013)
ci_2014_2019_df <- as.data.frame(ci_2014_2019)
ci_2020_2024_df <- as.data.frame(ci_2020_2024)

# Sikre at alle dataframes har samme variabler som hovedmodellen
common_vars <- intersect(names(point_estimates), rownames(ci_2008_2013_df))
common_vars <- intersect(common_vars, rownames(ci_2014_2019_df))
common_vars <- intersect(common_vars, rownames(ci_2020_2024_df))

# Filtrer variabler for sammenligning
point_estimates_filtered <- point_estimates[common_vars]
ci_2008_2013_filtered <- ci_2008_2013_df[common_vars, ]
ci_2014_2019_filtered <- ci_2014_2019_df[common_vars, ]
ci_2020_2024_filtered <- ci_2020_2024_df[common_vars, ]

# Lag en sammenligningstabell
comparison_df <- data.frame(
  Variable = common_vars,
  Punktestimat_Hele = point_estimates_filtered,
  CI_Low_2008_2013 = ci_2008_2013_filtered[,1],
  CI_High_2008_2013 = ci_2008_2013_filtered[,2],
  CI_Low_2014_2019 = ci_2014_2019_filtered[,1],
  CI_High_2014_2019 = ci_2014_2019_filtered[,2],
  CI_Low_2020_2024 = ci_2020_2024_filtered[,1],
  CI_High_2020_2024 = ci_2020_2024_filtered[,2]
)

# Se resultatene
print(comparison_df)

```

```{r}
# Legg til kolonner som viser om punktestimatet ligger innenfor konfidensintervallet
comparison_df <- comparison_df %>%
  mutate(
    Innenfor_2008_2013 = Punktestimat_Hele >= CI_Low_2008_2013 & Punktestimat_Hele <= CI_High_2008_2013,
    Innenfor_2014_2019 = Punktestimat_Hele >= CI_Low_2014_2019 & Punktestimat_Hele <= CI_High_2014_2019,
    Innenfor_2020_2024 = Punktestimat_Hele >= CI_Low_2020_2024 & Punktestimat_Hele <= CI_High_2020_2024
  )

# Skriv ut resultatet
print(comparison_df)

```

```{r}
# Gjør om tabellen til en pent formatert flextable
tbl_comparison <- comparison_df %>%
  flextable() %>%
  colformat_num(j = c("Punktestimat_Hele", 
                      "CI_Low_2008_2013", "CI_High_2008_2013",
                      "CI_Low_2014_2019", "CI_High_2014_2019",
                      "CI_Low_2020_2024", "CI_High_2020_2024"), 
                digits = 4) %>%
  set_caption("Sammenligning av punktestimat og konfidensintervaller") %>%
  autofit()

# Vis tabellen
tbl_comparison

```
